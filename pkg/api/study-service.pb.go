// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.0
// source: study_service/study-service.proto

package api

import (
	api_types "github.com/influenzanet/go-utils/pkg/api_types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceStatus_StatusValue int32

const (
	ServiceStatus_NORMAL  ServiceStatus_StatusValue = 0
	ServiceStatus_PROBLEM ServiceStatus_StatusValue = 1
)

// Enum value maps for ServiceStatus_StatusValue.
var (
	ServiceStatus_StatusValue_name = map[int32]string{
		0: "NORMAL",
		1: "PROBLEM",
	}
	ServiceStatus_StatusValue_value = map[string]int32{
		"NORMAL":  0,
		"PROBLEM": 1,
	}
)

func (x ServiceStatus_StatusValue) Enum() *ServiceStatus_StatusValue {
	p := new(ServiceStatus_StatusValue)
	*p = x
	return p
}

func (x ServiceStatus_StatusValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus_StatusValue) Descriptor() protoreflect.EnumDescriptor {
	return file_study_service_study_service_proto_enumTypes[0].Descriptor()
}

func (ServiceStatus_StatusValue) Type() protoreflect.EnumType {
	return &file_study_service_study_service_proto_enumTypes[0]
}

func (x ServiceStatus_StatusValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus_StatusValue.Descriptor instead.
func (ServiceStatus_StatusValue) EnumDescriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{30, 0}
}

type StudiesForUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Studies []*StudyForUser `protobuf:"bytes,1,rep,name=studies,proto3" json:"studies,omitempty"`
}

func (x *StudiesForUser) Reset() {
	*x = StudiesForUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudiesForUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudiesForUser) ProtoMessage() {}

func (x *StudiesForUser) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudiesForUser.ProtoReflect.Descriptor instead.
func (*StudiesForUser) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{0}
}

func (x *StudiesForUser) GetStudies() []*StudyForUser {
	if x != nil {
		return x.Studies
	}
	return nil
}

type FileType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Subtype string `protobuf:"bytes,2,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FileType) Reset() {
	*x = FileType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileType) ProtoMessage() {}

func (x *FileType) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileType.ProtoReflect.Descriptor instead.
func (*FileType) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{1}
}

func (x *FileType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileType) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *FileType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UploadParticipantFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*UploadParticipantFileReq_Info_
	//	*UploadParticipantFileReq_Chunk
	Data isUploadParticipantFileReq_Data `protobuf_oneof:"data"`
}

func (x *UploadParticipantFileReq) Reset() {
	*x = UploadParticipantFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadParticipantFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadParticipantFileReq) ProtoMessage() {}

func (x *UploadParticipantFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadParticipantFileReq.ProtoReflect.Descriptor instead.
func (*UploadParticipantFileReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{2}
}

func (m *UploadParticipantFileReq) GetData() isUploadParticipantFileReq_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadParticipantFileReq) GetInfo() *UploadParticipantFileReq_Info {
	if x, ok := x.GetData().(*UploadParticipantFileReq_Info_); ok {
		return x.Info
	}
	return nil
}

func (x *UploadParticipantFileReq) GetChunk() []byte {
	if x, ok := x.GetData().(*UploadParticipantFileReq_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadParticipantFileReq_Data interface {
	isUploadParticipantFileReq_Data()
}

type UploadParticipantFileReq_Info_ struct {
	Info *UploadParticipantFileReq_Info `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadParticipantFileReq_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadParticipantFileReq_Info_) isUploadParticipantFileReq_Data() {}

func (*UploadParticipantFileReq_Chunk) isUploadParticipantFileReq_Data() {}

type PaginatedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*PaginatedFile_Info
	//	*PaginatedFile_Chunk
	Data isPaginatedFile_Data `protobuf_oneof:"data"`
}

func (x *PaginatedFile) Reset() {
	*x = PaginatedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedFile) ProtoMessage() {}

func (x *PaginatedFile) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedFile.ProtoReflect.Descriptor instead.
func (*PaginatedFile) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{3}
}

func (m *PaginatedFile) GetData() isPaginatedFile_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *PaginatedFile) GetInfo() *PaginationInfo {
	if x, ok := x.GetData().(*PaginatedFile_Info); ok {
		return x.Info
	}
	return nil
}

func (x *PaginatedFile) GetChunk() []byte {
	if x, ok := x.GetData().(*PaginatedFile_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isPaginatedFile_Data interface {
	isPaginatedFile_Data()
}

type PaginatedFile_Info struct {
	Info *PaginationInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type PaginatedFile_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*PaginatedFile_Info) isPaginatedFile_Data() {}

func (*PaginatedFile_Chunk) isPaginatedFile_Data() {}

type PaginationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCount int32 `protobuf:"varint,1,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
	PageCount int32 `protobuf:"varint,2,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	Page      int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *PaginationInfo) Reset() {
	*x = PaginationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationInfo) ProtoMessage() {}

func (x *PaginationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationInfo.ProtoReflect.Descriptor instead.
func (*PaginationInfo) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{4}
}

func (x *PaginationInfo) GetItemCount() int32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *PaginationInfo) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *PaginationInfo) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationInfo) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetParticipantFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	FileId   string                `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *GetParticipantFileReq) Reset() {
	*x = GetParticipantFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParticipantFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParticipantFileReq) ProtoMessage() {}

func (x *GetParticipantFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParticipantFileReq.ProtoReflect.Descriptor instead.
func (*GetParticipantFileReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetParticipantFileReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetParticipantFileReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *GetParticipantFileReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Email       string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{6}
}

func (x *Subscription) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *Subscription) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type NotificationSubscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *NotificationSubscriptions) Reset() {
	*x = NotificationSubscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationSubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationSubscriptions) ProtoMessage() {}

func (x *NotificationSubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationSubscriptions.ProtoReflect.Descriptor instead.
func (*NotificationSubscriptions) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{7}
}

func (x *NotificationSubscriptions) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type UpdateResearcherNotificationSubscriptionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey      string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Subscriptions []*Subscription       `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *UpdateResearcherNotificationSubscriptionsReq) Reset() {
	*x = UpdateResearcherNotificationSubscriptionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResearcherNotificationSubscriptionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResearcherNotificationSubscriptionsReq) ProtoMessage() {}

func (x *UpdateResearcherNotificationSubscriptionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResearcherNotificationSubscriptionsReq.ProtoReflect.Descriptor instead.
func (*UpdateResearcherNotificationSubscriptionsReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateResearcherNotificationSubscriptionsReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UpdateResearcherNotificationSubscriptionsReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *UpdateResearcherNotificationSubscriptionsReq) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type GetResearcherNotificationSubscriptionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
}

func (x *GetResearcherNotificationSubscriptionsReq) Reset() {
	*x = GetResearcherNotificationSubscriptionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResearcherNotificationSubscriptionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResearcherNotificationSubscriptionsReq) ProtoMessage() {}

func (x *GetResearcherNotificationSubscriptionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResearcherNotificationSubscriptionsReq.ProtoReflect.Descriptor instead.
func (*GetResearcherNotificationSubscriptionsReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetResearcherNotificationSubscriptionsReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetResearcherNotificationSubscriptionsReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

type DeleteParticipantFilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	FileIds  []string              `protobuf:"bytes,3,rep,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty"`
}

func (x *DeleteParticipantFilesReq) Reset() {
	*x = DeleteParticipantFilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteParticipantFilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteParticipantFilesReq) ProtoMessage() {}

func (x *DeleteParticipantFilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteParticipantFilesReq.ProtoReflect.Descriptor instead.
func (*DeleteParticipantFilesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteParticipantFilesReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *DeleteParticipantFilesReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *DeleteParticipantFilesReq) GetFileIds() []string {
	if x != nil {
		return x.FileIds
	}
	return nil
}

type FileObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`      // DB id of the resource
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`  // it is referenced by survey response, or other object (like study)
	Time int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"` // when reference was created
}

func (x *FileObjectReference) Reset() {
	*x = FileObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileObjectReference) ProtoMessage() {}

func (x *FileObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileObjectReference.ProtoReflect.Descriptor instead.
func (*FileObjectReference) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{11}
}

func (x *FileObjectReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileObjectReference) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FileObjectReference) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParticipantId        string                 `protobuf:"bytes,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	UploadedBy           string                 `protobuf:"bytes,3,opt,name=uploaded_by,json=uploadedBy,proto3" json:"uploaded_by,omitempty"` // if not uploaded by the participant
	Status               string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Path                 string                 `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	PreviewPath          string                 `protobuf:"bytes,6,opt,name=preview_path,json=previewPath,proto3" json:"preview_path,omitempty"`
	SubStudy             string                 `protobuf:"bytes,7,opt,name=sub_study,json=subStudy,proto3" json:"sub_study,omitempty"`
	SubmittedAt          int64                  `protobuf:"varint,8,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	FileType             string                 `protobuf:"bytes,9,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	VisibleToParticipant bool                   `protobuf:"varint,10,opt,name=visible_to_participant,json=visibleToParticipant,proto3" json:"visible_to_participant,omitempty"`
	Name                 string                 `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	ReferencedIn         []*FileObjectReference `protobuf:"bytes,12,rep,name=referenced_in,json=referencedIn,proto3" json:"referenced_in,omitempty"`
	Size                 int32                  `protobuf:"varint,13,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{12}
}

func (x *FileInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileInfo) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *FileInfo) GetUploadedBy() string {
	if x != nil {
		return x.UploadedBy
	}
	return ""
}

func (x *FileInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetPreviewPath() string {
	if x != nil {
		return x.PreviewPath
	}
	return ""
}

func (x *FileInfo) GetSubStudy() string {
	if x != nil {
		return x.SubStudy
	}
	return ""
}

func (x *FileInfo) GetSubmittedAt() int64 {
	if x != nil {
		return x.SubmittedAt
	}
	return 0
}

func (x *FileInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *FileInfo) GetVisibleToParticipant() bool {
	if x != nil {
		return x.VisibleToParticipant
	}
	return false
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetReferencedIn() []*FileObjectReference {
	if x != nil {
		return x.ReferencedIn
	}
	return nil
}

func (x *FileInfo) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FileInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInfos []*FileInfo `protobuf:"bytes,1,rep,name=file_infos,json=fileInfos,proto3" json:"file_infos,omitempty"`
}

func (x *FileInfos) Reset() {
	*x = FileInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfos) ProtoMessage() {}

func (x *FileInfos) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfos.ProtoReflect.Descriptor instead.
func (*FileInfos) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{13}
}

func (x *FileInfos) GetFileInfos() []*FileInfo {
	if x != nil {
		return x.FileInfos
	}
	return nil
}

type SurveyResponseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyKey string                `protobuf:"bytes,3,opt,name=survey_key,json=surveyKey,proto3" json:"survey_key,omitempty"`
	From      int64                 `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	Until     int64                 `protobuf:"varint,5,opt,name=until,proto3" json:"until,omitempty"`
	// to query specific survey engine versions for example:
	ContextQuery map[string]string `protobuf:"bytes,6,rep,name=context_query,json=contextQuery,proto3" json:"context_query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SurveyResponseQuery) Reset() {
	*x = SurveyResponseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyResponseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyResponseQuery) ProtoMessage() {}

func (x *SurveyResponseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyResponseQuery.ProtoReflect.Descriptor instead.
func (*SurveyResponseQuery) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{14}
}

func (x *SurveyResponseQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SurveyResponseQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SurveyResponseQuery) GetSurveyKey() string {
	if x != nil {
		return x.SurveyKey
	}
	return ""
}

func (x *SurveyResponseQuery) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SurveyResponseQuery) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

func (x *SurveyResponseQuery) GetContextQuery() map[string]string {
	if x != nil {
		return x.ContextQuery
	}
	return nil
}

type ReportHistoryQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey      string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ReportKey     string                `protobuf:"bytes,3,opt,name=report_key,json=reportKey,proto3" json:"report_key,omitempty"`
	From          int64                 `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	Until         int64                 `protobuf:"varint,5,opt,name=until,proto3" json:"until,omitempty"`
	ParticipantId string                `protobuf:"bytes,6,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
}

func (x *ReportHistoryQuery) Reset() {
	*x = ReportHistoryQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportHistoryQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportHistoryQuery) ProtoMessage() {}

func (x *ReportHistoryQuery) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportHistoryQuery.ProtoReflect.Descriptor instead.
func (*ReportHistoryQuery) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{15}
}

func (x *ReportHistoryQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ReportHistoryQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ReportHistoryQuery) GetReportKey() string {
	if x != nil {
		return x.ReportKey
	}
	return ""
}

func (x *ReportHistoryQuery) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *ReportHistoryQuery) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

func (x *ReportHistoryQuery) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type FileInfoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey      string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	FileType      string                `protobuf:"bytes,3,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	From          int64                 `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	Until         int64                 `protobuf:"varint,5,opt,name=until,proto3" json:"until,omitempty"`
	ParticipantId string                `protobuf:"bytes,6,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
}

func (x *FileInfoQuery) Reset() {
	*x = FileInfoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoQuery) ProtoMessage() {}

func (x *FileInfoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoQuery.ProtoReflect.Descriptor instead.
func (*FileInfoQuery) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{16}
}

func (x *FileInfoQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *FileInfoQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *FileInfoQuery) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *FileInfoQuery) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *FileInfoQuery) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

func (x *FileInfoQuery) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type ParticipantStateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Status   string                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ParticipantStateQuery) Reset() {
	*x = ParticipantStateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantStateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantStateQuery) ProtoMessage() {}

func (x *ParticipantStateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantStateQuery.ProtoReflect.Descriptor instead.
func (*ParticipantStateQuery) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{17}
}

func (x *ParticipantStateQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ParticipantStateQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ParticipantStateQuery) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ParticipantStateByIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey      string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ParticipantId string                `protobuf:"bytes,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
}

func (x *ParticipantStateByIDQuery) Reset() {
	*x = ParticipantStateByIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantStateByIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantStateByIDQuery) ProtoMessage() {}

func (x *ParticipantStateByIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantStateByIDQuery.ProtoReflect.Descriptor instead.
func (*ParticipantStateByIDQuery) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{18}
}

func (x *ParticipantStateByIDQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ParticipantStateByIDQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ParticipantStateByIDQuery) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type GetPStatesWithPaginationQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Query    string                `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	PageSize int32                 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page     int32                 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	SortBy   map[string]int32      `protobuf:"bytes,6,rep,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetPStatesWithPaginationQuery) Reset() {
	*x = GetPStatesWithPaginationQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPStatesWithPaginationQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPStatesWithPaginationQuery) ProtoMessage() {}

func (x *GetPStatesWithPaginationQuery) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPStatesWithPaginationQuery.ProtoReflect.Descriptor instead.
func (*GetPStatesWithPaginationQuery) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetPStatesWithPaginationQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetPStatesWithPaginationQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *GetPStatesWithPaginationQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetPStatesWithPaginationQuery) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPStatesWithPaginationQuery) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetPStatesWithPaginationQuery) GetSortBy() map[string]int32 {
	if x != nil {
		return x.SortBy
	}
	return nil
}

type ParticipantStatesWithPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCount int32               `protobuf:"varint,1,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
	PageCount int32               `protobuf:"varint,2,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	Page      int32               `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Items     []*ParticipantState `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	PageSize  int32               `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ParticipantStatesWithPagination) Reset() {
	*x = ParticipantStatesWithPagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantStatesWithPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantStatesWithPagination) ProtoMessage() {}

func (x *ParticipantStatesWithPagination) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantStatesWithPagination.ProtoReflect.Descriptor instead.
func (*ParticipantStatesWithPagination) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{20}
}

func (x *ParticipantStatesWithPagination) GetItemCount() int32 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *ParticipantStatesWithPagination) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *ParticipantStatesWithPagination) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ParticipantStatesWithPagination) GetItems() []*ParticipantState {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ParticipantStatesWithPagination) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type StudyResponseStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyKey             string           `protobuf:"bytes,1,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyResponseCounts map[string]int64 `protobuf:"bytes,6,rep,name=survey_response_counts,json=surveyResponseCounts,proto3" json:"survey_response_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StudyResponseStatistics) Reset() {
	*x = StudyResponseStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyResponseStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyResponseStatistics) ProtoMessage() {}

func (x *StudyResponseStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyResponseStatistics.ProtoReflect.Descriptor instead.
func (*StudyResponseStatistics) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{21}
}

func (x *StudyResponseStatistics) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyResponseStatistics) GetSurveyResponseCounts() map[string]int64 {
	if x != nil {
		return x.SurveyResponseCounts
	}
	return nil
}

type ProfilesWithConditionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string   `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey   string   `protobuf:"bytes,2,opt,name=studyKey,proto3" json:"studyKey,omitempty"`
	ProfileIds []string `protobuf:"bytes,3,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
	// evaluate this expression for profiles if and until any of them fulfilles
	Condition *ExpressionArg `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *ProfilesWithConditionReq) Reset() {
	*x = ProfilesWithConditionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilesWithConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilesWithConditionReq) ProtoMessage() {}

func (x *ProfilesWithConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilesWithConditionReq.ProtoReflect.Descriptor instead.
func (*ProfilesWithConditionReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{22}
}

func (x *ProfilesWithConditionReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ProfilesWithConditionReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ProfilesWithConditionReq) GetProfileIds() []string {
	if x != nil {
		return x.ProfileIds
	}
	return nil
}

func (x *ProfilesWithConditionReq) GetCondition() *ExpressionArg {
	if x != nil {
		return x.Condition
	}
	return nil
}

type GetParticipantMessagesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey   string `protobuf:"bytes,2,opt,name=studyKey,proto3" json:"studyKey,omitempty"`
	ProfileId  string `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *GetParticipantMessagesReq) Reset() {
	*x = GetParticipantMessagesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParticipantMessagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParticipantMessagesReq) ProtoMessage() {}

func (x *GetParticipantMessagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParticipantMessagesReq.ProtoReflect.Descriptor instead.
func (*GetParticipantMessagesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetParticipantMessagesReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetParticipantMessagesReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *GetParticipantMessagesReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type GetReseacherMessagesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetReseacherMessagesReq) Reset() {
	*x = GetReseacherMessagesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReseacherMessagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReseacherMessagesReq) ProtoMessage() {}

func (x *GetReseacherMessagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReseacherMessagesReq.ProtoReflect.Descriptor instead.
func (*GetReseacherMessagesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetReseacherMessagesReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type GetStudiesWithPendingParticipantMessagesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetStudiesWithPendingParticipantMessagesReq) Reset() {
	*x = GetStudiesWithPendingParticipantMessagesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudiesWithPendingParticipantMessagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudiesWithPendingParticipantMessagesReq) ProtoMessage() {}

func (x *GetStudiesWithPendingParticipantMessagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudiesWithPendingParticipantMessagesReq.ProtoReflect.Descriptor instead.
func (*GetStudiesWithPendingParticipantMessagesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetStudiesWithPendingParticipantMessagesReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type StudyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// optional:
	Payload       map[string]string `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StudyKey      string            `protobuf:"bytes,4,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ParticipantId string            `protobuf:"bytes,5,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	SendTo        []string          `protobuf:"bytes,6,rep,name=send_to,json=sendTo,proto3" json:"send_to,omitempty"` // for researcher notifications
}

func (x *StudyMessage) Reset() {
	*x = StudyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyMessage) ProtoMessage() {}

func (x *StudyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyMessage.ProtoReflect.Descriptor instead.
func (*StudyMessage) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{26}
}

func (x *StudyMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StudyMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StudyMessage) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *StudyMessage) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyMessage) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *StudyMessage) GetSendTo() []string {
	if x != nil {
		return x.SendTo
	}
	return nil
}

type StudyMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*StudyMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *StudyMessages) Reset() {
	*x = StudyMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyMessages) ProtoMessage() {}

func (x *StudyMessages) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyMessages.ProtoReflect.Descriptor instead.
func (*StudyMessages) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{27}
}

func (x *StudyMessages) GetMessages() []*StudyMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type DeleteMessagesFromParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string   `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey   string   `protobuf:"bytes,2,opt,name=studyKey,proto3" json:"studyKey,omitempty"`
	ProfileId  string   `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	MessageIds []string `protobuf:"bytes,4,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
}

func (x *DeleteMessagesFromParticipantReq) Reset() {
	*x = DeleteMessagesFromParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMessagesFromParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessagesFromParticipantReq) ProtoMessage() {}

func (x *DeleteMessagesFromParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessagesFromParticipantReq.ProtoReflect.Descriptor instead.
func (*DeleteMessagesFromParticipantReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteMessagesFromParticipantReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeleteMessagesFromParticipantReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *DeleteMessagesFromParticipantReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *DeleteMessagesFromParticipantReq) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type DeleteResearcherMessagesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string   `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey   string   `protobuf:"bytes,2,opt,name=studyKey,proto3" json:"studyKey,omitempty"`
	MessageIds []string `protobuf:"bytes,3,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
}

func (x *DeleteResearcherMessagesReq) Reset() {
	*x = DeleteResearcherMessagesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResearcherMessagesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResearcherMessagesReq) ProtoMessage() {}

func (x *DeleteResearcherMessagesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResearcherMessagesReq.ProtoReflect.Descriptor instead.
func (*DeleteResearcherMessagesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteResearcherMessagesReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *DeleteResearcherMessagesReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *DeleteResearcherMessagesReq) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ServiceStatus_StatusValue `protobuf:"varint,1,opt,name=status,proto3,enum=influenzanet.study_service.ServiceStatus_StatusValue" json:"status,omitempty"`
	Msg     string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Version string                    `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{30}
}

func (x *ServiceStatus) GetStatus() ServiceStatus_StatusValue {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_NORMAL
}

func (x *ServiceStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ServiceStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type NewStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Study *Study                `protobuf:"bytes,2,opt,name=study,proto3" json:"study,omitempty"`
}

func (x *NewStudyRequest) Reset() {
	*x = NewStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStudyRequest) ProtoMessage() {}

func (x *NewStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStudyRequest.ProtoReflect.Descriptor instead.
func (*NewStudyRequest) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{31}
}

func (x *NewStudyRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *NewStudyRequest) GetStudy() *Study {
	if x != nil {
		return x.Study
	}
	return nil
}

type SurveyAndContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Survey                 *Survey         `protobuf:"bytes,1,opt,name=survey,proto3" json:"survey,omitempty"`
	Context                *SurveyContext  `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	Prefill                *SurveyResponse `protobuf:"bytes,3,opt,name=prefill,proto3" json:"prefill,omitempty"`
	TemporaryParticipantId string          `protobuf:"bytes,4,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
}

func (x *SurveyAndContext) Reset() {
	*x = SurveyAndContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyAndContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyAndContext) ProtoMessage() {}

func (x *SurveyAndContext) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyAndContext.ProtoReflect.Descriptor instead.
func (*SurveyAndContext) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{32}
}

func (x *SurveyAndContext) GetSurvey() *Survey {
	if x != nil {
		return x.Survey
	}
	return nil
}

func (x *SurveyAndContext) GetContext() *SurveyContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SurveyAndContext) GetPrefill() *SurveyResponse {
	if x != nil {
		return x.Prefill
	}
	return nil
}

func (x *SurveyAndContext) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

type StudyReferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
}

func (x *StudyReferenceReq) Reset() {
	*x = StudyReferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyReferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyReferenceReq) ProtoMessage() {}

func (x *StudyReferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyReferenceReq.ProtoReflect.Descriptor instead.
func (*StudyReferenceReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{33}
}

func (x *StudyReferenceReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyReferenceReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

type StudyRulesHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey   string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Since      int64                 `protobuf:"varint,3,opt,name=since,proto3" json:"since,omitempty"`
	Until      int64                 `protobuf:"varint,4,opt,name=until,proto3" json:"until,omitempty"`
	PageSize   int32                 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Page       int32                 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Descending bool                  `protobuf:"varint,7,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *StudyRulesHistoryReq) Reset() {
	*x = StudyRulesHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyRulesHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyRulesHistoryReq) ProtoMessage() {}

func (x *StudyRulesHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyRulesHistoryReq.ProtoReflect.Descriptor instead.
func (*StudyRulesHistoryReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{34}
}

func (x *StudyRulesHistoryReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyRulesHistoryReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyRulesHistoryReq) GetSince() int64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *StudyRulesHistoryReq) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

func (x *StudyRulesHistoryReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *StudyRulesHistoryReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *StudyRulesHistoryReq) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

type SurveyInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SurveyInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *SurveyInfoResp) Reset() {
	*x = SurveyInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyInfoResp) ProtoMessage() {}

func (x *SurveyInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyInfoResp.ProtoReflect.Descriptor instead.
func (*SurveyInfoResp) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{35}
}

func (x *SurveyInfoResp) GetInfos() []*SurveyInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type AddSurveyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Survey   *Survey               `protobuf:"bytes,3,opt,name=survey,proto3" json:"survey,omitempty"`
}

func (x *AddSurveyReq) Reset() {
	*x = AddSurveyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSurveyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSurveyReq) ProtoMessage() {}

func (x *AddSurveyReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSurveyReq.ProtoReflect.Descriptor instead.
func (*AddSurveyReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{36}
}

func (x *AddSurveyReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AddSurveyReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *AddSurveyReq) GetSurvey() *Survey {
	if x != nil {
		return x.Survey
	}
	return nil
}

type SubmitResponseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// identifies the user who is submitting
	StudyKey  string          `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Response  *SurveyResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	ProfileId string          `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// When subbmitting for temp participant:
	InstanceId                    string `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	TemporaryParticipantId        string `protobuf:"bytes,6,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
	TemporaryParticipantTimestamp int64  `protobuf:"varint,7,opt,name=temporary_participant_timestamp,json=temporaryParticipantTimestamp,proto3" json:"temporary_participant_timestamp,omitempty"`
}

func (x *SubmitResponseReq) Reset() {
	*x = SubmitResponseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitResponseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitResponseReq) ProtoMessage() {}

func (x *SubmitResponseReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitResponseReq.ProtoReflect.Descriptor instead.
func (*SubmitResponseReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{37}
}

func (x *SubmitResponseReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SubmitResponseReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SubmitResponseReq) GetResponse() *SurveyResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubmitResponseReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *SubmitResponseReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SubmitResponseReq) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

func (x *SubmitResponseReq) GetTemporaryParticipantTimestamp() int64 {
	if x != nil {
		return x.TemporaryParticipantTimestamp
	}
	return 0
}

type EnterStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ProfileId string                `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *EnterStudyRequest) Reset() {
	*x = EnterStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterStudyRequest) ProtoMessage() {}

func (x *EnterStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterStudyRequest.ProtoReflect.Descriptor instead.
func (*EnterStudyRequest) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{38}
}

func (x *EnterStudyRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *EnterStudyRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *EnterStudyRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type LeaveStudyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ProfileId string                `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *LeaveStudyMsg) Reset() {
	*x = LeaveStudyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveStudyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveStudyMsg) ProtoMessage() {}

func (x *LeaveStudyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveStudyMsg.ProtoReflect.Descriptor instead.
func (*LeaveStudyMsg) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{39}
}

func (x *LeaveStudyMsg) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LeaveStudyMsg) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *LeaveStudyMsg) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type SurveyVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyVersions []*Survey `protobuf:"bytes,1,rep,name=survey_versions,json=surveyVersions,proto3" json:"survey_versions,omitempty"`
}

func (x *SurveyVersions) Reset() {
	*x = SurveyVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyVersions) ProtoMessage() {}

func (x *SurveyVersions) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyVersions.ProtoReflect.Descriptor instead.
func (*SurveyVersions) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{40}
}

func (x *SurveyVersions) GetSurveyVersions() []*Survey {
	if x != nil {
		return x.SurveyVersions
	}
	return nil
}

type SurveyReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId             string                `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey               string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyKey              string                `protobuf:"bytes,3,opt,name=survey_key,json=surveyKey,proto3" json:"survey_key,omitempty"`
	ProfileId              string                `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	Token                  *api_types.TokenInfos `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	TemporaryParticipantId string                `protobuf:"bytes,6,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
}

func (x *SurveyReferenceRequest) Reset() {
	*x = SurveyReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyReferenceRequest) ProtoMessage() {}

func (x *SurveyReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyReferenceRequest.ProtoReflect.Descriptor instead.
func (*SurveyReferenceRequest) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{41}
}

func (x *SurveyReferenceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SurveyReferenceRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SurveyReferenceRequest) GetSurveyKey() string {
	if x != nil {
		return x.SurveyKey
	}
	return ""
}

func (x *SurveyReferenceRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *SurveyReferenceRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SurveyReferenceRequest) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

type StudyRulesVersionReferenceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Id    string                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StudyRulesVersionReferenceReq) Reset() {
	*x = StudyRulesVersionReferenceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyRulesVersionReferenceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyRulesVersionReferenceReq) ProtoMessage() {}

func (x *StudyRulesVersionReferenceReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyRulesVersionReferenceReq.ProtoReflect.Descriptor instead.
func (*StudyRulesVersionReferenceReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{42}
}

func (x *StudyRulesVersionReferenceReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyRulesVersionReferenceReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SurveyVersionReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SurveyKey string                `protobuf:"bytes,3,opt,name=survey_key,json=surveyKey,proto3" json:"survey_key,omitempty"`
	VersionId string                `protobuf:"bytes,4,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *SurveyVersionReferenceRequest) Reset() {
	*x = SurveyVersionReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyVersionReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyVersionReferenceRequest) ProtoMessage() {}

func (x *SurveyVersionReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyVersionReferenceRequest.ProtoReflect.Descriptor instead.
func (*SurveyVersionReferenceRequest) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{43}
}

func (x *SurveyVersionReferenceRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SurveyVersionReferenceRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *SurveyVersionReferenceRequest) GetSurveyKey() string {
	if x != nil {
		return x.SurveyKey
	}
	return ""
}

func (x *SurveyVersionReferenceRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type GetSurveyKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey           string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	IncludeUnpublished bool                  `protobuf:"varint,3,opt,name=include_unpublished,json=includeUnpublished,proto3" json:"include_unpublished,omitempty"`
}

func (x *GetSurveyKeysRequest) Reset() {
	*x = GetSurveyKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyKeysRequest) ProtoMessage() {}

func (x *GetSurveyKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyKeysRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyKeysRequest) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetSurveyKeysRequest) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetSurveyKeysRequest) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *GetSurveyKeysRequest) GetIncludeUnpublished() bool {
	if x != nil {
		return x.IncludeUnpublished
	}
	return false
}

type SurveyKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SurveyKeys) Reset() {
	*x = SurveyKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyKeys) ProtoMessage() {}

func (x *SurveyKeys) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyKeys.ProtoReflect.Descriptor instead.
func (*SurveyKeys) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{45}
}

func (x *SurveyKeys) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CreateReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ProfileId string                `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	Report    *Report               `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *CreateReportReq) Reset() {
	*x = CreateReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportReq) ProtoMessage() {}

func (x *CreateReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportReq.ProtoReflect.Descriptor instead.
func (*CreateReportReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{46}
}

func (x *CreateReportReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CreateReportReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *CreateReportReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *CreateReportReq) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

type GetReportsForUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token           *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	OnlyForProfiles []string              `protobuf:"bytes,2,rep,name=only_for_profiles,json=onlyForProfiles,proto3" json:"only_for_profiles,omitempty"` // if not defined return for all profiles
	OnlyForStudies  []string              `protobuf:"bytes,3,rep,name=only_for_studies,json=onlyForStudies,proto3" json:"only_for_studies,omitempty"`    // if not defined return for all profiles
	ReportKeyFilter string                `protobuf:"bytes,4,opt,name=report_key_filter,json=reportKeyFilter,proto3" json:"report_key_filter,omitempty"` // if only one report key should be looked up
	From            int64                 `protobuf:"varint,5,opt,name=from,proto3" json:"from,omitempty"`                                               // optional time filters
	Until           int64                 `protobuf:"varint,6,opt,name=until,proto3" json:"until,omitempty"`
	IgnoreReports   []string              `protobuf:"bytes,7,rep,name=ignore_reports,json=ignoreReports,proto3" json:"ignore_reports,omitempty"` // don't send back these reports
	Limit           int64                 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetReportsForUserReq) Reset() {
	*x = GetReportsForUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportsForUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportsForUserReq) ProtoMessage() {}

func (x *GetReportsForUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportsForUserReq.ProtoReflect.Descriptor instead.
func (*GetReportsForUserReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{47}
}

func (x *GetReportsForUserReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *GetReportsForUserReq) GetOnlyForProfiles() []string {
	if x != nil {
		return x.OnlyForProfiles
	}
	return nil
}

func (x *GetReportsForUserReq) GetOnlyForStudies() []string {
	if x != nil {
		return x.OnlyForStudies
	}
	return nil
}

func (x *GetReportsForUserReq) GetReportKeyFilter() string {
	if x != nil {
		return x.ReportKeyFilter
	}
	return ""
}

func (x *GetReportsForUserReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *GetReportsForUserReq) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

func (x *GetReportsForUserReq) GetIgnoreReports() []string {
	if x != nil {
		return x.IgnoreReports
	}
	return nil
}

func (x *GetReportsForUserReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RemoveConfidentialResponsesForProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ForProfiles []string              `protobuf:"bytes,2,rep,name=for_profiles,json=forProfiles,proto3" json:"for_profiles,omitempty"` // if not defined remove for all profiles
}

func (x *RemoveConfidentialResponsesForProfilesReq) Reset() {
	*x = RemoveConfidentialResponsesForProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConfidentialResponsesForProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConfidentialResponsesForProfilesReq) ProtoMessage() {}

func (x *RemoveConfidentialResponsesForProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConfidentialResponsesForProfilesReq.ProtoReflect.Descriptor instead.
func (*RemoveConfidentialResponsesForProfilesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{48}
}

func (x *RemoveConfidentialResponsesForProfilesReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *RemoveConfidentialResponsesForProfilesReq) GetForProfiles() []string {
	if x != nil {
		return x.ForProfiles
	}
	return nil
}

type ReportHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *ReportHistory) Reset() {
	*x = ReportHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportHistory) ProtoMessage() {}

func (x *ReportHistory) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportHistory.ProtoReflect.Descriptor instead.
func (*ReportHistory) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{49}
}

func (x *ReportHistory) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

type GetStudiesForUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetStudiesForUserReq) Reset() {
	*x = GetStudiesForUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStudiesForUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStudiesForUserReq) ProtoMessage() {}

func (x *GetStudiesForUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStudiesForUserReq.ProtoReflect.Descriptor instead.
func (*GetStudiesForUserReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{50}
}

func (x *GetStudiesForUserReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

type Studies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Studies []*Study `protobuf:"bytes,1,rep,name=studies,proto3" json:"studies,omitempty"`
}

func (x *Studies) Reset() {
	*x = Studies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Studies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Studies) ProtoMessage() {}

func (x *Studies) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Studies.ProtoReflect.Descriptor instead.
func (*Studies) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{51}
}

func (x *Studies) GetStudies() []*Study {
	if x != nil {
		return x.Studies
	}
	return nil
}

type StudyMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Member   *Study_Member         `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *StudyMemberReq) Reset() {
	*x = StudyMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyMemberReq) ProtoMessage() {}

func (x *StudyMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyMemberReq.ProtoReflect.Descriptor instead.
func (*StudyMemberReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{52}
}

func (x *StudyMemberReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyMemberReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyMemberReq) GetMember() *Study_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type StudyRulesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Rules    []*Expression         `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *StudyRulesReq) Reset() {
	*x = StudyRulesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyRulesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyRulesReq) ProtoMessage() {}

func (x *StudyRulesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyRulesReq.ProtoReflect.Descriptor instead.
func (*StudyRulesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{53}
}

func (x *StudyRulesReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyRulesReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyRulesReq) GetRules() []*Expression {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RunRulesForSingleParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey      string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ParticipantId string                `protobuf:"bytes,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Rules         []*Expression         `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RunRulesForSingleParticipantReq) Reset() {
	*x = RunRulesForSingleParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRulesForSingleParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRulesForSingleParticipantReq) ProtoMessage() {}

func (x *RunRulesForSingleParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRulesForSingleParticipantReq.ProtoReflect.Descriptor instead.
func (*RunRulesForSingleParticipantReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{54}
}

func (x *RunRulesForSingleParticipantReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *RunRulesForSingleParticipantReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *RunRulesForSingleParticipantReq) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *RunRulesForSingleParticipantReq) GetRules() []*Expression {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RunRulesForPreviousResponsesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos                           `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                                          `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Rules    []*Expression                                   `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
	Filter   *RunRulesForPreviousResponsesReq_ResponseFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *RunRulesForPreviousResponsesReq) Reset() {
	*x = RunRulesForPreviousResponsesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRulesForPreviousResponsesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRulesForPreviousResponsesReq) ProtoMessage() {}

func (x *RunRulesForPreviousResponsesReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRulesForPreviousResponsesReq.ProtoReflect.Descriptor instead.
func (*RunRulesForPreviousResponsesReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{55}
}

func (x *RunRulesForPreviousResponsesReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *RunRulesForPreviousResponsesReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *RunRulesForPreviousResponsesReq) GetRules() []*Expression {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RunRulesForPreviousResponsesReq) GetFilter() *RunRulesForPreviousResponsesReq_ResponseFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type StudyStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey  string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	NewStatus string                `protobuf:"bytes,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (x *StudyStatusReq) Reset() {
	*x = StudyStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyStatusReq) ProtoMessage() {}

func (x *StudyStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyStatusReq.ProtoReflect.Descriptor instead.
func (*StudyStatusReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{56}
}

func (x *StudyStatusReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyStatusReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyStatusReq) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

type StudyPropsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	Props    *Study_Props          `protobuf:"bytes,3,opt,name=props,proto3" json:"props,omitempty"`
}

func (x *StudyPropsReq) Reset() {
	*x = StudyPropsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyPropsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyPropsReq) ProtoMessage() {}

func (x *StudyPropsReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyPropsReq.ProtoReflect.Descriptor instead.
func (*StudyPropsReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{57}
}

func (x *StudyPropsReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StudyPropsReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *StudyPropsReq) GetProps() *Study_Props {
	if x != nil {
		return x.Props
	}
	return nil
}

type RuleRunSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantCount              int32   `protobuf:"varint,1,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
	ParticipantStateChangePerRule []int32 `protobuf:"varint,2,rep,packed,name=participant_state_change_per_rule,json=participantStateChangePerRule,proto3" json:"participant_state_change_per_rule,omitempty"`
	Duration                      int64   `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *RuleRunSummary) Reset() {
	*x = RuleRunSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRunSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRunSummary) ProtoMessage() {}

func (x *RuleRunSummary) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRunSummary.ProtoReflect.Descriptor instead.
func (*RuleRunSummary) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{58}
}

func (x *RuleRunSummary) GetParticipantCount() int32 {
	if x != nil {
		return x.ParticipantCount
	}
	return 0
}

func (x *RuleRunSummary) GetParticipantStateChangePerRule() []int32 {
	if x != nil {
		return x.ParticipantStateChangePerRule
	}
	return nil
}

func (x *RuleRunSummary) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type ConvertTempParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token                  *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey               string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ProfileId              string                `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	TemporaryParticipantId string                `protobuf:"bytes,4,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
	Timestamp              int64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // second piece of info to confirm knowledge of the participant
}

func (x *ConvertTempParticipantReq) Reset() {
	*x = ConvertTempParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertTempParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertTempParticipantReq) ProtoMessage() {}

func (x *ConvertTempParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertTempParticipantReq.ProtoReflect.Descriptor instead.
func (*ConvertTempParticipantReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{59}
}

func (x *ConvertTempParticipantReq) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ConvertTempParticipantReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ConvertTempParticipantReq) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *ConvertTempParticipantReq) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

func (x *ConvertTempParticipantReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RegisterTempParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey   string `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
}

func (x *RegisterTempParticipantReq) Reset() {
	*x = RegisterTempParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTempParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTempParticipantReq) ProtoMessage() {}

func (x *RegisterTempParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTempParticipantReq.ProtoReflect.Descriptor instead.
func (*RegisterTempParticipantReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{60}
}

func (x *RegisterTempParticipantReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RegisterTempParticipantReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

type RegisterTempParticipantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemporaryParticipantId string `protobuf:"bytes,1,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
	Timestamp              int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RegisterTempParticipantResponse) Reset() {
	*x = RegisterTempParticipantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTempParticipantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTempParticipantResponse) ProtoMessage() {}

func (x *RegisterTempParticipantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTempParticipantResponse.ProtoReflect.Descriptor instead.
func (*RegisterTempParticipantResponse) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{61}
}

func (x *RegisterTempParticipantResponse) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

func (x *RegisterTempParticipantResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetAssignedSurveysForTemporaryParticipantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId             string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	StudyKey               string `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	TemporaryParticipantId string `protobuf:"bytes,3,opt,name=temporary_participant_id,json=temporaryParticipantId,proto3" json:"temporary_participant_id,omitempty"`
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) Reset() {
	*x = GetAssignedSurveysForTemporaryParticipantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssignedSurveysForTemporaryParticipantReq) ProtoMessage() {}

func (x *GetAssignedSurveysForTemporaryParticipantReq) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssignedSurveysForTemporaryParticipantReq.ProtoReflect.Descriptor instead.
func (*GetAssignedSurveysForTemporaryParticipantReq) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{62}
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *GetAssignedSurveysForTemporaryParticipantReq) GetTemporaryParticipantId() string {
	if x != nil {
		return x.TemporaryParticipantId
	}
	return ""
}

type ConfidentialResponsesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey       string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	ParticipantIds []string              `protobuf:"bytes,3,rep,name=participant_ids,json=participantIds,proto3" json:"participant_ids,omitempty"`
	Condition      *Expression           `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	KeyFilter      string                `protobuf:"bytes,5,opt,name=key_filter,json=keyFilter,proto3" json:"key_filter,omitempty"` // optional key filter to retrieve only for this one
}

func (x *ConfidentialResponsesQuery) Reset() {
	*x = ConfidentialResponsesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfidentialResponsesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidentialResponsesQuery) ProtoMessage() {}

func (x *ConfidentialResponsesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidentialResponsesQuery.ProtoReflect.Descriptor instead.
func (*ConfidentialResponsesQuery) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{63}
}

func (x *ConfidentialResponsesQuery) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ConfidentialResponsesQuery) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *ConfidentialResponsesQuery) GetParticipantIds() []string {
	if x != nil {
		return x.ParticipantIds
	}
	return nil
}

func (x *ConfidentialResponsesQuery) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ConfidentialResponsesQuery) GetKeyFilter() string {
	if x != nil {
		return x.KeyFilter
	}
	return ""
}

type ConfidentialResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*SurveyResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *ConfidentialResponses) Reset() {
	*x = ConfidentialResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfidentialResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidentialResponses) ProtoMessage() {}

func (x *ConfidentialResponses) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidentialResponses.ProtoReflect.Descriptor instead.
func (*ConfidentialResponses) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{64}
}

func (x *ConfidentialResponses) GetResponses() []*SurveyResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type UploadParticipantFileReq_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *api_types.TokenInfos `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	StudyKey string                `protobuf:"bytes,2,opt,name=study_key,json=studyKey,proto3" json:"study_key,omitempty"`
	SubStudy string                `protobuf:"bytes,3,opt,name=sub_study,json=subStudy,proto3" json:"sub_study,omitempty"`
	// Types that are assignable to Participant:
	//
	//	*UploadParticipantFileReq_Info_ProfileId
	//	*UploadParticipantFileReq_Info_ParticipantId
	Participant          isUploadParticipantFileReq_Info_Participant `protobuf_oneof:"participant"`
	FileType             *FileType                                   `protobuf:"bytes,6,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	VisibleToParticipant bool                                        `protobuf:"varint,7,opt,name=visible_to_participant,json=visibleToParticipant,proto3" json:"visible_to_participant,omitempty"`
}

func (x *UploadParticipantFileReq_Info) Reset() {
	*x = UploadParticipantFileReq_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadParticipantFileReq_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadParticipantFileReq_Info) ProtoMessage() {}

func (x *UploadParticipantFileReq_Info) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadParticipantFileReq_Info.ProtoReflect.Descriptor instead.
func (*UploadParticipantFileReq_Info) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *UploadParticipantFileReq_Info) GetToken() *api_types.TokenInfos {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *UploadParticipantFileReq_Info) GetStudyKey() string {
	if x != nil {
		return x.StudyKey
	}
	return ""
}

func (x *UploadParticipantFileReq_Info) GetSubStudy() string {
	if x != nil {
		return x.SubStudy
	}
	return ""
}

func (m *UploadParticipantFileReq_Info) GetParticipant() isUploadParticipantFileReq_Info_Participant {
	if m != nil {
		return m.Participant
	}
	return nil
}

func (x *UploadParticipantFileReq_Info) GetProfileId() string {
	if x, ok := x.GetParticipant().(*UploadParticipantFileReq_Info_ProfileId); ok {
		return x.ProfileId
	}
	return ""
}

func (x *UploadParticipantFileReq_Info) GetParticipantId() string {
	if x, ok := x.GetParticipant().(*UploadParticipantFileReq_Info_ParticipantId); ok {
		return x.ParticipantId
	}
	return ""
}

func (x *UploadParticipantFileReq_Info) GetFileType() *FileType {
	if x != nil {
		return x.FileType
	}
	return nil
}

func (x *UploadParticipantFileReq_Info) GetVisibleToParticipant() bool {
	if x != nil {
		return x.VisibleToParticipant
	}
	return false
}

type isUploadParticipantFileReq_Info_Participant interface {
	isUploadParticipantFileReq_Info_Participant()
}

type UploadParticipantFileReq_Info_ProfileId struct {
	ProfileId string `protobuf:"bytes,4,opt,name=profile_id,json=profileId,proto3,oneof"`
}

type UploadParticipantFileReq_Info_ParticipantId struct {
	ParticipantId string `protobuf:"bytes,5,opt,name=participant_id,json=participantId,proto3,oneof"` // if researcher upload for participant directly
}

func (*UploadParticipantFileReq_Info_ProfileId) isUploadParticipantFileReq_Info_Participant() {}

func (*UploadParticipantFileReq_Info_ParticipantId) isUploadParticipantFileReq_Info_Participant() {}

type RunRulesForPreviousResponsesReq_ResponseFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyKeys        []string `protobuf:"bytes,1,rep,name=survey_keys,json=surveyKeys,proto3" json:"survey_keys,omitempty"`
	ParticipantIds    []string `protobuf:"bytes,2,rep,name=participant_ids,json=participantIds,proto3" json:"participant_ids,omitempty"`
	ParticipantStatus []string `protobuf:"bytes,3,rep,name=participant_status,json=participantStatus,proto3" json:"participant_status,omitempty"`
	From              int64    `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	Until             int64    `protobuf:"varint,5,opt,name=until,proto3" json:"until,omitempty"`
}

func (x *RunRulesForPreviousResponsesReq_ResponseFilter) Reset() {
	*x = RunRulesForPreviousResponsesReq_ResponseFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_study_service_study_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRulesForPreviousResponsesReq_ResponseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRulesForPreviousResponsesReq_ResponseFilter) ProtoMessage() {}

func (x *RunRulesForPreviousResponsesReq_ResponseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_study_service_study_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRulesForPreviousResponsesReq_ResponseFilter.ProtoReflect.Descriptor instead.
func (*RunRulesForPreviousResponsesReq_ResponseFilter) Descriptor() ([]byte, []int) {
	return file_study_service_study_service_proto_rawDescGZIP(), []int{55, 0}
}

func (x *RunRulesForPreviousResponsesReq_ResponseFilter) GetSurveyKeys() []string {
	if x != nil {
		return x.SurveyKeys
	}
	return nil
}

func (x *RunRulesForPreviousResponsesReq_ResponseFilter) GetParticipantIds() []string {
	if x != nil {
		return x.ParticipantIds
	}
	return nil
}

func (x *RunRulesForPreviousResponsesReq_ResponseFilter) GetParticipantStatus() []string {
	if x != nil {
		return x.ParticipantStatus
	}
	return nil
}

func (x *RunRulesForPreviousResponsesReq_ResponseFilter) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *RunRulesForPreviousResponsesReq_ResponseFilter) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

var File_study_service_study_service_proto protoreflect.FileDescriptor

var file_study_service_study_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x54, 0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0xc9, 0x02,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x71, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x6b, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7f, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x54, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x50, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x13,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x12, 0x66, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd4, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x83, 0x01, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1,
	0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9f, 0x01,
	0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x7b, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0xb2, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10,
	0x01, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x05,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x06,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x11, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x4b, 0x65, 0x79, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x4e,
	0x0a, 0x0e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3c, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x06, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x22,
	0xf1, 0x02, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1f, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a,
	0x0d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x35,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x5d, 0x0a, 0x0e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x85, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38,
	0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1d, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xb1, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x85, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x46, 0x0a, 0x07, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x07, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x22, 0xa6,
	0x01, 0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x1f,
	0x52, 0x75, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xcd, 0x03, 0x0a, 0x1f, 0x52, 0x75, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x3c, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x62,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0xb3, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa2,
	0x01, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x5a, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x79,
	0x0a, 0x1f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa6, 0x01, 0x0a, 0x2c, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x44,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x32, 0xc2, 0x3a, 0x0a, 0x0f, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x12, 0x4b, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x68, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x73, 0x12, 0x62, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6c, 0x0a, 0x0e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x12, 0x64, 0x0a, 0x0a, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x4d, 0x73, 0x67, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73,
	0x12, 0x5c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x28, 0x01, 0x12, 0x7a, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x30, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x3b, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1d, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x54,
	0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xa2,
	0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x48, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x71, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x65, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x48,
	0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x7a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x7e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x60, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e,
	0x65, 0x77, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x65, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x60, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x62, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0xa6, 0x01, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x35,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x48, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x47, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x12,
	0x60, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x5e, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x5e, 0x0a, 0x0e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x7f, 0x0a, 0x17, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x53, 0x61,
	0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x54, 0x6f, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12,
	0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x77, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x69, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x44, 0x65,
	0x66, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x7b, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x70, 0x0a, 0x0f, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x61, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x52, 0x75, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x87, 0x01,
	0x0a, 0x1c, 0x52, 0x75, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x3b,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x75, 0x0a, 0x14,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x31,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x30,
	0x01, 0x12, 0x9c, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x3b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x7e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x35, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x6b, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x30, 0x01, 0x12, 0x6f, 0x0a,
	0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x30, 0x01, 0x12, 0x85,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x57, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x43, 0x53, 0x56, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e,
	0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x43, 0x53, 0x56, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x74,
	0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61,
	0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a,
	0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x74, 0x4a,
	0x53, 0x4f, 0x4e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74,
	0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x30, 0x01, 0x12,
	0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x53, 0x56, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x21, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x30, 0x01, 0x12, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2c, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x2f, 0x5a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	0x6e, 0x7a, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_study_service_study_service_proto_rawDescOnce sync.Once
	file_study_service_study_service_proto_rawDescData = file_study_service_study_service_proto_rawDesc
)

func file_study_service_study_service_proto_rawDescGZIP() []byte {
	file_study_service_study_service_proto_rawDescOnce.Do(func() {
		file_study_service_study_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_study_service_study_service_proto_rawDescData)
	})
	return file_study_service_study_service_proto_rawDescData
}

var file_study_service_study_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_study_service_study_service_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_study_service_study_service_proto_goTypes = []interface{}{
	(ServiceStatus_StatusValue)(0),                         // 0: influenzanet.study_service.ServiceStatus.StatusValue
	(*StudiesForUser)(nil),                                 // 1: influenzanet.study_service.StudiesForUser
	(*FileType)(nil),                                       // 2: influenzanet.study_service.FileType
	(*UploadParticipantFileReq)(nil),                       // 3: influenzanet.study_service.UploadParticipantFileReq
	(*PaginatedFile)(nil),                                  // 4: influenzanet.study_service.PaginatedFile
	(*PaginationInfo)(nil),                                 // 5: influenzanet.study_service.PaginationInfo
	(*GetParticipantFileReq)(nil),                          // 6: influenzanet.study_service.GetParticipantFileReq
	(*Subscription)(nil),                                   // 7: influenzanet.study_service.Subscription
	(*NotificationSubscriptions)(nil),                      // 8: influenzanet.study_service.NotificationSubscriptions
	(*UpdateResearcherNotificationSubscriptionsReq)(nil),   // 9: influenzanet.study_service.UpdateResearcherNotificationSubscriptionsReq
	(*GetResearcherNotificationSubscriptionsReq)(nil),      // 10: influenzanet.study_service.GetResearcherNotificationSubscriptionsReq
	(*DeleteParticipantFilesReq)(nil),                      // 11: influenzanet.study_service.DeleteParticipantFilesReq
	(*FileObjectReference)(nil),                            // 12: influenzanet.study_service.FileObjectReference
	(*FileInfo)(nil),                                       // 13: influenzanet.study_service.FileInfo
	(*FileInfos)(nil),                                      // 14: influenzanet.study_service.FileInfos
	(*SurveyResponseQuery)(nil),                            // 15: influenzanet.study_service.SurveyResponseQuery
	(*ReportHistoryQuery)(nil),                             // 16: influenzanet.study_service.ReportHistoryQuery
	(*FileInfoQuery)(nil),                                  // 17: influenzanet.study_service.FileInfoQuery
	(*ParticipantStateQuery)(nil),                          // 18: influenzanet.study_service.ParticipantStateQuery
	(*ParticipantStateByIDQuery)(nil),                      // 19: influenzanet.study_service.ParticipantStateByIDQuery
	(*GetPStatesWithPaginationQuery)(nil),                  // 20: influenzanet.study_service.GetPStatesWithPaginationQuery
	(*ParticipantStatesWithPagination)(nil),                // 21: influenzanet.study_service.ParticipantStatesWithPagination
	(*StudyResponseStatistics)(nil),                        // 22: influenzanet.study_service.StudyResponseStatistics
	(*ProfilesWithConditionReq)(nil),                       // 23: influenzanet.study_service.ProfilesWithConditionReq
	(*GetParticipantMessagesReq)(nil),                      // 24: influenzanet.study_service.GetParticipantMessagesReq
	(*GetReseacherMessagesReq)(nil),                        // 25: influenzanet.study_service.GetReseacherMessagesReq
	(*GetStudiesWithPendingParticipantMessagesReq)(nil),    // 26: influenzanet.study_service.GetStudiesWithPendingParticipantMessagesReq
	(*StudyMessage)(nil),                                   // 27: influenzanet.study_service.StudyMessage
	(*StudyMessages)(nil),                                  // 28: influenzanet.study_service.StudyMessages
	(*DeleteMessagesFromParticipantReq)(nil),               // 29: influenzanet.study_service.DeleteMessagesFromParticipantReq
	(*DeleteResearcherMessagesReq)(nil),                    // 30: influenzanet.study_service.DeleteResearcherMessagesReq
	(*ServiceStatus)(nil),                                  // 31: influenzanet.study_service.ServiceStatus
	(*NewStudyRequest)(nil),                                // 32: influenzanet.study_service.NewStudyRequest
	(*SurveyAndContext)(nil),                               // 33: influenzanet.study_service.SurveyAndContext
	(*StudyReferenceReq)(nil),                              // 34: influenzanet.study_service.StudyReferenceReq
	(*StudyRulesHistoryReq)(nil),                           // 35: influenzanet.study_service.StudyRulesHistoryReq
	(*SurveyInfoResp)(nil),                                 // 36: influenzanet.study_service.SurveyInfoResp
	(*AddSurveyReq)(nil),                                   // 37: influenzanet.study_service.AddSurveyReq
	(*SubmitResponseReq)(nil),                              // 38: influenzanet.study_service.SubmitResponseReq
	(*EnterStudyRequest)(nil),                              // 39: influenzanet.study_service.EnterStudyRequest
	(*LeaveStudyMsg)(nil),                                  // 40: influenzanet.study_service.LeaveStudyMsg
	(*SurveyVersions)(nil),                                 // 41: influenzanet.study_service.SurveyVersions
	(*SurveyReferenceRequest)(nil),                         // 42: influenzanet.study_service.SurveyReferenceRequest
	(*StudyRulesVersionReferenceReq)(nil),                  // 43: influenzanet.study_service.StudyRulesVersionReferenceReq
	(*SurveyVersionReferenceRequest)(nil),                  // 44: influenzanet.study_service.SurveyVersionReferenceRequest
	(*GetSurveyKeysRequest)(nil),                           // 45: influenzanet.study_service.GetSurveyKeysRequest
	(*SurveyKeys)(nil),                                     // 46: influenzanet.study_service.SurveyKeys
	(*CreateReportReq)(nil),                                // 47: influenzanet.study_service.CreateReportReq
	(*GetReportsForUserReq)(nil),                           // 48: influenzanet.study_service.GetReportsForUserReq
	(*RemoveConfidentialResponsesForProfilesReq)(nil),      // 49: influenzanet.study_service.RemoveConfidentialResponsesForProfilesReq
	(*ReportHistory)(nil),                                  // 50: influenzanet.study_service.ReportHistory
	(*GetStudiesForUserReq)(nil),                           // 51: influenzanet.study_service.GetStudiesForUserReq
	(*Studies)(nil),                                        // 52: influenzanet.study_service.Studies
	(*StudyMemberReq)(nil),                                 // 53: influenzanet.study_service.StudyMemberReq
	(*StudyRulesReq)(nil),                                  // 54: influenzanet.study_service.StudyRulesReq
	(*RunRulesForSingleParticipantReq)(nil),                // 55: influenzanet.study_service.RunRulesForSingleParticipantReq
	(*RunRulesForPreviousResponsesReq)(nil),                // 56: influenzanet.study_service.RunRulesForPreviousResponsesReq
	(*StudyStatusReq)(nil),                                 // 57: influenzanet.study_service.StudyStatusReq
	(*StudyPropsReq)(nil),                                  // 58: influenzanet.study_service.StudyPropsReq
	(*RuleRunSummary)(nil),                                 // 59: influenzanet.study_service.RuleRunSummary
	(*ConvertTempParticipantReq)(nil),                      // 60: influenzanet.study_service.ConvertTempParticipantReq
	(*RegisterTempParticipantReq)(nil),                     // 61: influenzanet.study_service.RegisterTempParticipantReq
	(*RegisterTempParticipantResponse)(nil),                // 62: influenzanet.study_service.RegisterTempParticipantResponse
	(*GetAssignedSurveysForTemporaryParticipantReq)(nil),   // 63: influenzanet.study_service.GetAssignedSurveysForTemporaryParticipantReq
	(*ConfidentialResponsesQuery)(nil),                     // 64: influenzanet.study_service.ConfidentialResponsesQuery
	(*ConfidentialResponses)(nil),                          // 65: influenzanet.study_service.ConfidentialResponses
	(*UploadParticipantFileReq_Info)(nil),                  // 66: influenzanet.study_service.UploadParticipantFileReq.Info
	nil,                                                    // 67: influenzanet.study_service.SurveyResponseQuery.ContextQueryEntry
	nil,                                                    // 68: influenzanet.study_service.GetPStatesWithPaginationQuery.SortByEntry
	nil,                                                    // 69: influenzanet.study_service.StudyResponseStatistics.SurveyResponseCountsEntry
	nil,                                                    // 70: influenzanet.study_service.StudyMessage.PayloadEntry
	(*RunRulesForPreviousResponsesReq_ResponseFilter)(nil), // 71: influenzanet.study_service.RunRulesForPreviousResponsesReq.ResponseFilter
	(*StudyForUser)(nil),                                   // 72: influenzanet.study_service.StudyForUser
	(*api_types.TokenInfos)(nil),                           // 73: influenzanet.shared.TokenInfos
	(*ParticipantState)(nil),                               // 74: influenzanet.study_service.ParticipantState
	(*ExpressionArg)(nil),                                  // 75: influenzanet.study_service.ExpressionArg
	(*Study)(nil),                                          // 76: influenzanet.study_service.Study
	(*Survey)(nil),                                         // 77: influenzanet.study_service.Survey
	(*SurveyContext)(nil),                                  // 78: influenzanet.study_service.SurveyContext
	(*SurveyResponse)(nil),                                 // 79: influenzanet.study_service.SurveyResponse
	(*SurveyInfo)(nil),                                     // 80: influenzanet.study_service.SurveyInfo
	(*Report)(nil),                                         // 81: influenzanet.study_service.Report
	(*Study_Member)(nil),                                   // 82: influenzanet.study_service.Study.Member
	(*Expression)(nil),                                     // 83: influenzanet.study_service.Expression
	(*Study_Props)(nil),                                    // 84: influenzanet.study_service.Study.Props
	(*emptypb.Empty)(nil),                                  // 85: google.protobuf.Empty
	(*ResponseExportQuery)(nil),                            // 86: influenzanet.study_service.ResponseExportQuery
	(*SurveyInfoExportQuery)(nil),                          // 87: influenzanet.study_service.SurveyInfoExportQuery
	(*AssignedSurveys)(nil),                                // 88: influenzanet.study_service.AssignedSurveys
	(*Chunk)(nil),                                          // 89: influenzanet.study_service.Chunk
	(*StudyRules)(nil),                                     // 90: influenzanet.study_service.StudyRules
	(*StudyRulesHistory)(nil),                              // 91: influenzanet.study_service.StudyRulesHistory
	(*SurveyInfoExport)(nil),                               // 92: influenzanet.study_service.SurveyInfoExport
}
var file_study_service_study_service_proto_depIdxs = []int32{
	72,  // 0: influenzanet.study_service.StudiesForUser.studies:type_name -> influenzanet.study_service.StudyForUser
	66,  // 1: influenzanet.study_service.UploadParticipantFileReq.info:type_name -> influenzanet.study_service.UploadParticipantFileReq.Info
	5,   // 2: influenzanet.study_service.PaginatedFile.info:type_name -> influenzanet.study_service.PaginationInfo
	73,  // 3: influenzanet.study_service.GetParticipantFileReq.token:type_name -> influenzanet.shared.TokenInfos
	7,   // 4: influenzanet.study_service.NotificationSubscriptions.subscriptions:type_name -> influenzanet.study_service.Subscription
	73,  // 5: influenzanet.study_service.UpdateResearcherNotificationSubscriptionsReq.token:type_name -> influenzanet.shared.TokenInfos
	7,   // 6: influenzanet.study_service.UpdateResearcherNotificationSubscriptionsReq.subscriptions:type_name -> influenzanet.study_service.Subscription
	73,  // 7: influenzanet.study_service.GetResearcherNotificationSubscriptionsReq.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 8: influenzanet.study_service.DeleteParticipantFilesReq.token:type_name -> influenzanet.shared.TokenInfos
	12,  // 9: influenzanet.study_service.FileInfo.referenced_in:type_name -> influenzanet.study_service.FileObjectReference
	13,  // 10: influenzanet.study_service.FileInfos.file_infos:type_name -> influenzanet.study_service.FileInfo
	73,  // 11: influenzanet.study_service.SurveyResponseQuery.token:type_name -> influenzanet.shared.TokenInfos
	67,  // 12: influenzanet.study_service.SurveyResponseQuery.context_query:type_name -> influenzanet.study_service.SurveyResponseQuery.ContextQueryEntry
	73,  // 13: influenzanet.study_service.ReportHistoryQuery.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 14: influenzanet.study_service.FileInfoQuery.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 15: influenzanet.study_service.ParticipantStateQuery.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 16: influenzanet.study_service.ParticipantStateByIDQuery.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 17: influenzanet.study_service.GetPStatesWithPaginationQuery.token:type_name -> influenzanet.shared.TokenInfos
	68,  // 18: influenzanet.study_service.GetPStatesWithPaginationQuery.sort_by:type_name -> influenzanet.study_service.GetPStatesWithPaginationQuery.SortByEntry
	74,  // 19: influenzanet.study_service.ParticipantStatesWithPagination.items:type_name -> influenzanet.study_service.ParticipantState
	69,  // 20: influenzanet.study_service.StudyResponseStatistics.survey_response_counts:type_name -> influenzanet.study_service.StudyResponseStatistics.SurveyResponseCountsEntry
	75,  // 21: influenzanet.study_service.ProfilesWithConditionReq.condition:type_name -> influenzanet.study_service.ExpressionArg
	70,  // 22: influenzanet.study_service.StudyMessage.payload:type_name -> influenzanet.study_service.StudyMessage.PayloadEntry
	27,  // 23: influenzanet.study_service.StudyMessages.messages:type_name -> influenzanet.study_service.StudyMessage
	0,   // 24: influenzanet.study_service.ServiceStatus.status:type_name -> influenzanet.study_service.ServiceStatus.StatusValue
	73,  // 25: influenzanet.study_service.NewStudyRequest.token:type_name -> influenzanet.shared.TokenInfos
	76,  // 26: influenzanet.study_service.NewStudyRequest.study:type_name -> influenzanet.study_service.Study
	77,  // 27: influenzanet.study_service.SurveyAndContext.survey:type_name -> influenzanet.study_service.Survey
	78,  // 28: influenzanet.study_service.SurveyAndContext.context:type_name -> influenzanet.study_service.SurveyContext
	79,  // 29: influenzanet.study_service.SurveyAndContext.prefill:type_name -> influenzanet.study_service.SurveyResponse
	73,  // 30: influenzanet.study_service.StudyReferenceReq.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 31: influenzanet.study_service.StudyRulesHistoryReq.token:type_name -> influenzanet.shared.TokenInfos
	80,  // 32: influenzanet.study_service.SurveyInfoResp.infos:type_name -> influenzanet.study_service.SurveyInfo
	73,  // 33: influenzanet.study_service.AddSurveyReq.token:type_name -> influenzanet.shared.TokenInfos
	77,  // 34: influenzanet.study_service.AddSurveyReq.survey:type_name -> influenzanet.study_service.Survey
	73,  // 35: influenzanet.study_service.SubmitResponseReq.token:type_name -> influenzanet.shared.TokenInfos
	79,  // 36: influenzanet.study_service.SubmitResponseReq.response:type_name -> influenzanet.study_service.SurveyResponse
	73,  // 37: influenzanet.study_service.EnterStudyRequest.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 38: influenzanet.study_service.LeaveStudyMsg.token:type_name -> influenzanet.shared.TokenInfos
	77,  // 39: influenzanet.study_service.SurveyVersions.survey_versions:type_name -> influenzanet.study_service.Survey
	73,  // 40: influenzanet.study_service.SurveyReferenceRequest.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 41: influenzanet.study_service.StudyRulesVersionReferenceReq.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 42: influenzanet.study_service.SurveyVersionReferenceRequest.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 43: influenzanet.study_service.GetSurveyKeysRequest.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 44: influenzanet.study_service.CreateReportReq.token:type_name -> influenzanet.shared.TokenInfos
	81,  // 45: influenzanet.study_service.CreateReportReq.report:type_name -> influenzanet.study_service.Report
	73,  // 46: influenzanet.study_service.GetReportsForUserReq.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 47: influenzanet.study_service.RemoveConfidentialResponsesForProfilesReq.token:type_name -> influenzanet.shared.TokenInfos
	81,  // 48: influenzanet.study_service.ReportHistory.reports:type_name -> influenzanet.study_service.Report
	73,  // 49: influenzanet.study_service.GetStudiesForUserReq.token:type_name -> influenzanet.shared.TokenInfos
	76,  // 50: influenzanet.study_service.Studies.studies:type_name -> influenzanet.study_service.Study
	73,  // 51: influenzanet.study_service.StudyMemberReq.token:type_name -> influenzanet.shared.TokenInfos
	82,  // 52: influenzanet.study_service.StudyMemberReq.member:type_name -> influenzanet.study_service.Study.Member
	73,  // 53: influenzanet.study_service.StudyRulesReq.token:type_name -> influenzanet.shared.TokenInfos
	83,  // 54: influenzanet.study_service.StudyRulesReq.rules:type_name -> influenzanet.study_service.Expression
	73,  // 55: influenzanet.study_service.RunRulesForSingleParticipantReq.token:type_name -> influenzanet.shared.TokenInfos
	83,  // 56: influenzanet.study_service.RunRulesForSingleParticipantReq.rules:type_name -> influenzanet.study_service.Expression
	73,  // 57: influenzanet.study_service.RunRulesForPreviousResponsesReq.token:type_name -> influenzanet.shared.TokenInfos
	83,  // 58: influenzanet.study_service.RunRulesForPreviousResponsesReq.rules:type_name -> influenzanet.study_service.Expression
	71,  // 59: influenzanet.study_service.RunRulesForPreviousResponsesReq.filter:type_name -> influenzanet.study_service.RunRulesForPreviousResponsesReq.ResponseFilter
	73,  // 60: influenzanet.study_service.StudyStatusReq.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 61: influenzanet.study_service.StudyPropsReq.token:type_name -> influenzanet.shared.TokenInfos
	84,  // 62: influenzanet.study_service.StudyPropsReq.props:type_name -> influenzanet.study_service.Study.Props
	73,  // 63: influenzanet.study_service.ConvertTempParticipantReq.token:type_name -> influenzanet.shared.TokenInfos
	73,  // 64: influenzanet.study_service.ConfidentialResponsesQuery.token:type_name -> influenzanet.shared.TokenInfos
	83,  // 65: influenzanet.study_service.ConfidentialResponsesQuery.condition:type_name -> influenzanet.study_service.Expression
	79,  // 66: influenzanet.study_service.ConfidentialResponses.responses:type_name -> influenzanet.study_service.SurveyResponse
	73,  // 67: influenzanet.study_service.UploadParticipantFileReq.Info.token:type_name -> influenzanet.shared.TokenInfos
	2,   // 68: influenzanet.study_service.UploadParticipantFileReq.Info.file_type:type_name -> influenzanet.study_service.FileType
	85,  // 69: influenzanet.study_service.StudyServiceApi.Status:input_type -> google.protobuf.Empty
	39,  // 70: influenzanet.study_service.StudyServiceApi.EnterStudy:input_type -> influenzanet.study_service.EnterStudyRequest
	73,  // 71: influenzanet.study_service.StudyServiceApi.GetAssignedSurveys:input_type -> influenzanet.shared.TokenInfos
	42,  // 72: influenzanet.study_service.StudyServiceApi.GetAssignedSurvey:input_type -> influenzanet.study_service.SurveyReferenceRequest
	38,  // 73: influenzanet.study_service.StudyServiceApi.SubmitResponse:input_type -> influenzanet.study_service.SubmitResponseReq
	40,  // 74: influenzanet.study_service.StudyServiceApi.LeaveStudy:input_type -> influenzanet.study_service.LeaveStudyMsg
	73,  // 75: influenzanet.study_service.StudyServiceApi.ProfileDeleted:input_type -> influenzanet.shared.TokenInfos
	73,  // 76: influenzanet.study_service.StudyServiceApi.DeleteParticipantData:input_type -> influenzanet.shared.TokenInfos
	3,   // 77: influenzanet.study_service.StudyServiceApi.UploadParticipantFile:input_type -> influenzanet.study_service.UploadParticipantFileReq
	11,  // 78: influenzanet.study_service.StudyServiceApi.DeleteParticipantFiles:input_type -> influenzanet.study_service.DeleteParticipantFilesReq
	6,   // 79: influenzanet.study_service.StudyServiceApi.GetParticipantFile:input_type -> influenzanet.study_service.GetParticipantFileReq
	61,  // 80: influenzanet.study_service.StudyServiceApi.RegisterTemporaryParticipant:input_type -> influenzanet.study_service.RegisterTempParticipantReq
	60,  // 81: influenzanet.study_service.StudyServiceApi.ConvertTemporaryToParticipant:input_type -> influenzanet.study_service.ConvertTempParticipantReq
	63,  // 82: influenzanet.study_service.StudyServiceApi.GetAssignedSurveysForTemporaryParticipant:input_type -> influenzanet.study_service.GetAssignedSurveysForTemporaryParticipantReq
	47,  // 83: influenzanet.study_service.StudyServiceApi.CreateReport:input_type -> influenzanet.study_service.CreateReportReq
	51,  // 84: influenzanet.study_service.StudyServiceApi.GetStudiesForUser:input_type -> influenzanet.study_service.GetStudiesForUserReq
	73,  // 85: influenzanet.study_service.StudyServiceApi.GetActiveStudies:input_type -> influenzanet.shared.TokenInfos
	34,  // 86: influenzanet.study_service.StudyServiceApi.GetStudySurveyInfos:input_type -> influenzanet.study_service.StudyReferenceReq
	23,  // 87: influenzanet.study_service.StudyServiceApi.HasParticipantStateWithCondition:input_type -> influenzanet.study_service.ProfilesWithConditionReq
	24,  // 88: influenzanet.study_service.StudyServiceApi.GetParticipantMessages:input_type -> influenzanet.study_service.GetParticipantMessagesReq
	25,  // 89: influenzanet.study_service.StudyServiceApi.GetResearcherMessages:input_type -> influenzanet.study_service.GetReseacherMessagesReq
	29,  // 90: influenzanet.study_service.StudyServiceApi.DeleteMessagesFromParticipant:input_type -> influenzanet.study_service.DeleteMessagesFromParticipantReq
	30,  // 91: influenzanet.study_service.StudyServiceApi.DeleteResearcherMessages:input_type -> influenzanet.study_service.DeleteResearcherMessagesReq
	48,  // 92: influenzanet.study_service.StudyServiceApi.GetReportsForUser:input_type -> influenzanet.study_service.GetReportsForUserReq
	49,  // 93: influenzanet.study_service.StudyServiceApi.RemoveConfidentialResponsesForProfiles:input_type -> influenzanet.study_service.RemoveConfidentialResponsesForProfilesReq
	32,  // 94: influenzanet.study_service.StudyServiceApi.CreateNewStudy:input_type -> influenzanet.study_service.NewStudyRequest
	73,  // 95: influenzanet.study_service.StudyServiceApi.GetAllStudies:input_type -> influenzanet.shared.TokenInfos
	34,  // 96: influenzanet.study_service.StudyServiceApi.GetStudy:input_type -> influenzanet.study_service.StudyReferenceReq
	53,  // 97: influenzanet.study_service.StudyServiceApi.SaveStudyMember:input_type -> influenzanet.study_service.StudyMemberReq
	53,  // 98: influenzanet.study_service.StudyServiceApi.RemoveStudyMember:input_type -> influenzanet.study_service.StudyMemberReq
	10,  // 99: influenzanet.study_service.StudyServiceApi.GetResearcherNotificationSubscriptions:input_type -> influenzanet.study_service.GetResearcherNotificationSubscriptionsReq
	9,   // 100: influenzanet.study_service.StudyServiceApi.UpdateResearcherNotificationSubscriptions:input_type -> influenzanet.study_service.UpdateResearcherNotificationSubscriptionsReq
	26,  // 101: influenzanet.study_service.StudyServiceApi.GetStudiesWithPendingParticipantMessages:input_type -> influenzanet.study_service.GetStudiesWithPendingParticipantMessagesReq
	57,  // 102: influenzanet.study_service.StudyServiceApi.SaveStudyStatus:input_type -> influenzanet.study_service.StudyStatusReq
	58,  // 103: influenzanet.study_service.StudyServiceApi.SaveStudyProps:input_type -> influenzanet.study_service.StudyPropsReq
	54,  // 104: influenzanet.study_service.StudyServiceApi.SaveStudyRules:input_type -> influenzanet.study_service.StudyRulesReq
	34,  // 105: influenzanet.study_service.StudyServiceApi.GetCurrentStudyRules:input_type -> influenzanet.study_service.StudyReferenceReq
	35,  // 106: influenzanet.study_service.StudyServiceApi.GetStudyRulesHistory:input_type -> influenzanet.study_service.StudyRulesHistoryReq
	43,  // 107: influenzanet.study_service.StudyServiceApi.RemoveStudyRulesVersion:input_type -> influenzanet.study_service.StudyRulesVersionReferenceReq
	37,  // 108: influenzanet.study_service.StudyServiceApi.SaveSurveyToStudy:input_type -> influenzanet.study_service.AddSurveyReq
	42,  // 109: influenzanet.study_service.StudyServiceApi.GetSurveyVersionInfos:input_type -> influenzanet.study_service.SurveyReferenceRequest
	45,  // 110: influenzanet.study_service.StudyServiceApi.GetSurveyKeys:input_type -> influenzanet.study_service.GetSurveyKeysRequest
	44,  // 111: influenzanet.study_service.StudyServiceApi.GetSurveyDefForStudy:input_type -> influenzanet.study_service.SurveyVersionReferenceRequest
	44,  // 112: influenzanet.study_service.StudyServiceApi.RemoveSurveyVersion:input_type -> influenzanet.study_service.SurveyVersionReferenceRequest
	42,  // 113: influenzanet.study_service.StudyServiceApi.UnpublishSurvey:input_type -> influenzanet.study_service.SurveyReferenceRequest
	34,  // 114: influenzanet.study_service.StudyServiceApi.DeleteStudy:input_type -> influenzanet.study_service.StudyReferenceReq
	54,  // 115: influenzanet.study_service.StudyServiceApi.RunRules:input_type -> influenzanet.study_service.StudyRulesReq
	55,  // 116: influenzanet.study_service.StudyServiceApi.RunRulesForSingleParticipant:input_type -> influenzanet.study_service.RunRulesForSingleParticipantReq
	56,  // 117: influenzanet.study_service.StudyServiceApi.RunRulesForPreviousResponses:input_type -> influenzanet.study_service.RunRulesForPreviousResponsesReq
	15,  // 118: influenzanet.study_service.StudyServiceApi.GetStudyResponseStatistics:input_type -> influenzanet.study_service.SurveyResponseQuery
	15,  // 119: influenzanet.study_service.StudyServiceApi.StreamStudyResponses:input_type -> influenzanet.study_service.SurveyResponseQuery
	18,  // 120: influenzanet.study_service.StudyServiceApi.StreamParticipantStates:input_type -> influenzanet.study_service.ParticipantStateQuery
	20,  // 121: influenzanet.study_service.StudyServiceApi.GetParticipantStatesWithPagination:input_type -> influenzanet.study_service.GetPStatesWithPaginationQuery
	19,  // 122: influenzanet.study_service.StudyServiceApi.GetParticipantStateByID:input_type -> influenzanet.study_service.ParticipantStateByIDQuery
	16,  // 123: influenzanet.study_service.StudyServiceApi.StreamReportHistory:input_type -> influenzanet.study_service.ReportHistoryQuery
	17,  // 124: influenzanet.study_service.StudyServiceApi.StreamParticipantFileInfos:input_type -> influenzanet.study_service.FileInfoQuery
	64,  // 125: influenzanet.study_service.StudyServiceApi.GetConfidentialResponses:input_type -> influenzanet.study_service.ConfidentialResponsesQuery
	86,  // 126: influenzanet.study_service.StudyServiceApi.GetResponsesWideFormatCSV:input_type -> influenzanet.study_service.ResponseExportQuery
	86,  // 127: influenzanet.study_service.StudyServiceApi.GetResponsesLongFormatCSV:input_type -> influenzanet.study_service.ResponseExportQuery
	86,  // 128: influenzanet.study_service.StudyServiceApi.GetResponsesFlatJSON:input_type -> influenzanet.study_service.ResponseExportQuery
	86,  // 129: influenzanet.study_service.StudyServiceApi.GetResponsesFlatJSONWithPagination:input_type -> influenzanet.study_service.ResponseExportQuery
	87,  // 130: influenzanet.study_service.StudyServiceApi.GetSurveyInfoPreviewCSV:input_type -> influenzanet.study_service.SurveyInfoExportQuery
	87,  // 131: influenzanet.study_service.StudyServiceApi.GetSurveyInfoPreview:input_type -> influenzanet.study_service.SurveyInfoExportQuery
	31,  // 132: influenzanet.study_service.StudyServiceApi.Status:output_type -> influenzanet.study_service.ServiceStatus
	88,  // 133: influenzanet.study_service.StudyServiceApi.EnterStudy:output_type -> influenzanet.study_service.AssignedSurveys
	88,  // 134: influenzanet.study_service.StudyServiceApi.GetAssignedSurveys:output_type -> influenzanet.study_service.AssignedSurveys
	33,  // 135: influenzanet.study_service.StudyServiceApi.GetAssignedSurvey:output_type -> influenzanet.study_service.SurveyAndContext
	88,  // 136: influenzanet.study_service.StudyServiceApi.SubmitResponse:output_type -> influenzanet.study_service.AssignedSurveys
	88,  // 137: influenzanet.study_service.StudyServiceApi.LeaveStudy:output_type -> influenzanet.study_service.AssignedSurveys
	31,  // 138: influenzanet.study_service.StudyServiceApi.ProfileDeleted:output_type -> influenzanet.study_service.ServiceStatus
	31,  // 139: influenzanet.study_service.StudyServiceApi.DeleteParticipantData:output_type -> influenzanet.study_service.ServiceStatus
	13,  // 140: influenzanet.study_service.StudyServiceApi.UploadParticipantFile:output_type -> influenzanet.study_service.FileInfo
	31,  // 141: influenzanet.study_service.StudyServiceApi.DeleteParticipantFiles:output_type -> influenzanet.study_service.ServiceStatus
	89,  // 142: influenzanet.study_service.StudyServiceApi.GetParticipantFile:output_type -> influenzanet.study_service.Chunk
	62,  // 143: influenzanet.study_service.StudyServiceApi.RegisterTemporaryParticipant:output_type -> influenzanet.study_service.RegisterTempParticipantResponse
	31,  // 144: influenzanet.study_service.StudyServiceApi.ConvertTemporaryToParticipant:output_type -> influenzanet.study_service.ServiceStatus
	88,  // 145: influenzanet.study_service.StudyServiceApi.GetAssignedSurveysForTemporaryParticipant:output_type -> influenzanet.study_service.AssignedSurveys
	31,  // 146: influenzanet.study_service.StudyServiceApi.CreateReport:output_type -> influenzanet.study_service.ServiceStatus
	1,   // 147: influenzanet.study_service.StudyServiceApi.GetStudiesForUser:output_type -> influenzanet.study_service.StudiesForUser
	52,  // 148: influenzanet.study_service.StudyServiceApi.GetActiveStudies:output_type -> influenzanet.study_service.Studies
	36,  // 149: influenzanet.study_service.StudyServiceApi.GetStudySurveyInfos:output_type -> influenzanet.study_service.SurveyInfoResp
	31,  // 150: influenzanet.study_service.StudyServiceApi.HasParticipantStateWithCondition:output_type -> influenzanet.study_service.ServiceStatus
	28,  // 151: influenzanet.study_service.StudyServiceApi.GetParticipantMessages:output_type -> influenzanet.study_service.StudyMessages
	28,  // 152: influenzanet.study_service.StudyServiceApi.GetResearcherMessages:output_type -> influenzanet.study_service.StudyMessages
	31,  // 153: influenzanet.study_service.StudyServiceApi.DeleteMessagesFromParticipant:output_type -> influenzanet.study_service.ServiceStatus
	31,  // 154: influenzanet.study_service.StudyServiceApi.DeleteResearcherMessages:output_type -> influenzanet.study_service.ServiceStatus
	50,  // 155: influenzanet.study_service.StudyServiceApi.GetReportsForUser:output_type -> influenzanet.study_service.ReportHistory
	31,  // 156: influenzanet.study_service.StudyServiceApi.RemoveConfidentialResponsesForProfiles:output_type -> influenzanet.study_service.ServiceStatus
	76,  // 157: influenzanet.study_service.StudyServiceApi.CreateNewStudy:output_type -> influenzanet.study_service.Study
	52,  // 158: influenzanet.study_service.StudyServiceApi.GetAllStudies:output_type -> influenzanet.study_service.Studies
	76,  // 159: influenzanet.study_service.StudyServiceApi.GetStudy:output_type -> influenzanet.study_service.Study
	76,  // 160: influenzanet.study_service.StudyServiceApi.SaveStudyMember:output_type -> influenzanet.study_service.Study
	76,  // 161: influenzanet.study_service.StudyServiceApi.RemoveStudyMember:output_type -> influenzanet.study_service.Study
	8,   // 162: influenzanet.study_service.StudyServiceApi.GetResearcherNotificationSubscriptions:output_type -> influenzanet.study_service.NotificationSubscriptions
	8,   // 163: influenzanet.study_service.StudyServiceApi.UpdateResearcherNotificationSubscriptions:output_type -> influenzanet.study_service.NotificationSubscriptions
	52,  // 164: influenzanet.study_service.StudyServiceApi.GetStudiesWithPendingParticipantMessages:output_type -> influenzanet.study_service.Studies
	76,  // 165: influenzanet.study_service.StudyServiceApi.SaveStudyStatus:output_type -> influenzanet.study_service.Study
	76,  // 166: influenzanet.study_service.StudyServiceApi.SaveStudyProps:output_type -> influenzanet.study_service.Study
	76,  // 167: influenzanet.study_service.StudyServiceApi.SaveStudyRules:output_type -> influenzanet.study_service.Study
	90,  // 168: influenzanet.study_service.StudyServiceApi.GetCurrentStudyRules:output_type -> influenzanet.study_service.StudyRules
	91,  // 169: influenzanet.study_service.StudyServiceApi.GetStudyRulesHistory:output_type -> influenzanet.study_service.StudyRulesHistory
	31,  // 170: influenzanet.study_service.StudyServiceApi.RemoveStudyRulesVersion:output_type -> influenzanet.study_service.ServiceStatus
	77,  // 171: influenzanet.study_service.StudyServiceApi.SaveSurveyToStudy:output_type -> influenzanet.study_service.Survey
	41,  // 172: influenzanet.study_service.StudyServiceApi.GetSurveyVersionInfos:output_type -> influenzanet.study_service.SurveyVersions
	46,  // 173: influenzanet.study_service.StudyServiceApi.GetSurveyKeys:output_type -> influenzanet.study_service.SurveyKeys
	77,  // 174: influenzanet.study_service.StudyServiceApi.GetSurveyDefForStudy:output_type -> influenzanet.study_service.Survey
	31,  // 175: influenzanet.study_service.StudyServiceApi.RemoveSurveyVersion:output_type -> influenzanet.study_service.ServiceStatus
	31,  // 176: influenzanet.study_service.StudyServiceApi.UnpublishSurvey:output_type -> influenzanet.study_service.ServiceStatus
	31,  // 177: influenzanet.study_service.StudyServiceApi.DeleteStudy:output_type -> influenzanet.study_service.ServiceStatus
	59,  // 178: influenzanet.study_service.StudyServiceApi.RunRules:output_type -> influenzanet.study_service.RuleRunSummary
	59,  // 179: influenzanet.study_service.StudyServiceApi.RunRulesForSingleParticipant:output_type -> influenzanet.study_service.RuleRunSummary
	59,  // 180: influenzanet.study_service.StudyServiceApi.RunRulesForPreviousResponses:output_type -> influenzanet.study_service.RuleRunSummary
	22,  // 181: influenzanet.study_service.StudyServiceApi.GetStudyResponseStatistics:output_type -> influenzanet.study_service.StudyResponseStatistics
	79,  // 182: influenzanet.study_service.StudyServiceApi.StreamStudyResponses:output_type -> influenzanet.study_service.SurveyResponse
	74,  // 183: influenzanet.study_service.StudyServiceApi.StreamParticipantStates:output_type -> influenzanet.study_service.ParticipantState
	21,  // 184: influenzanet.study_service.StudyServiceApi.GetParticipantStatesWithPagination:output_type -> influenzanet.study_service.ParticipantStatesWithPagination
	74,  // 185: influenzanet.study_service.StudyServiceApi.GetParticipantStateByID:output_type -> influenzanet.study_service.ParticipantState
	81,  // 186: influenzanet.study_service.StudyServiceApi.StreamReportHistory:output_type -> influenzanet.study_service.Report
	13,  // 187: influenzanet.study_service.StudyServiceApi.StreamParticipantFileInfos:output_type -> influenzanet.study_service.FileInfo
	65,  // 188: influenzanet.study_service.StudyServiceApi.GetConfidentialResponses:output_type -> influenzanet.study_service.ConfidentialResponses
	89,  // 189: influenzanet.study_service.StudyServiceApi.GetResponsesWideFormatCSV:output_type -> influenzanet.study_service.Chunk
	89,  // 190: influenzanet.study_service.StudyServiceApi.GetResponsesLongFormatCSV:output_type -> influenzanet.study_service.Chunk
	89,  // 191: influenzanet.study_service.StudyServiceApi.GetResponsesFlatJSON:output_type -> influenzanet.study_service.Chunk
	4,   // 192: influenzanet.study_service.StudyServiceApi.GetResponsesFlatJSONWithPagination:output_type -> influenzanet.study_service.PaginatedFile
	89,  // 193: influenzanet.study_service.StudyServiceApi.GetSurveyInfoPreviewCSV:output_type -> influenzanet.study_service.Chunk
	92,  // 194: influenzanet.study_service.StudyServiceApi.GetSurveyInfoPreview:output_type -> influenzanet.study_service.SurveyInfoExport
	132, // [132:195] is the sub-list for method output_type
	69,  // [69:132] is the sub-list for method input_type
	69,  // [69:69] is the sub-list for extension type_name
	69,  // [69:69] is the sub-list for extension extendee
	0,   // [0:69] is the sub-list for field type_name
}

func init() { file_study_service_study_service_proto_init() }
func file_study_service_study_service_proto_init() {
	if File_study_service_study_service_proto != nil {
		return
	}
	file_study_service_study_proto_init()
	file_study_service_exporter_proto_init()
	file_study_service_survey_proto_init()
	file_study_service_expression_proto_init()
	file_study_service_survey_response_proto_init()
	file_study_service_participant_state_proto_init()
	file_study_service_report_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_study_service_study_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudiesForUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadParticipantFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParticipantFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationSubscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResearcherNotificationSubscriptionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResearcherNotificationSubscriptionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteParticipantFilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyResponseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportHistoryQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantStateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantStateByIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPStatesWithPaginationQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantStatesWithPagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyResponseStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilesWithConditionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParticipantMessagesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReseacherMessagesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStudiesWithPendingParticipantMessagesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMessagesFromParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResearcherMessagesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyAndContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyReferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyRulesHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSurveyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitResponseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveStudyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyRulesVersionReferenceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyVersionReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportsForUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveConfidentialResponsesForProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStudiesForUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Studies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyRulesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRulesForSingleParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRulesForPreviousResponsesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyPropsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRunSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertTempParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTempParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTempParticipantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssignedSurveysForTemporaryParticipantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfidentialResponsesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfidentialResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadParticipantFileReq_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_study_service_study_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRulesForPreviousResponsesReq_ResponseFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_study_service_study_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*UploadParticipantFileReq_Info_)(nil),
		(*UploadParticipantFileReq_Chunk)(nil),
	}
	file_study_service_study_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*PaginatedFile_Info)(nil),
		(*PaginatedFile_Chunk)(nil),
	}
	file_study_service_study_service_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*UploadParticipantFileReq_Info_ProfileId)(nil),
		(*UploadParticipantFileReq_Info_ParticipantId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_study_service_study_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_study_service_study_service_proto_goTypes,
		DependencyIndexes: file_study_service_study_service_proto_depIdxs,
		EnumInfos:         file_study_service_study_service_proto_enumTypes,
		MessageInfos:      file_study_service_study_service_proto_msgTypes,
	}.Build()
	File_study_service_study_service_proto = out.File
	file_study_service_study_service_proto_rawDesc = nil
	file_study_service_study_service_proto_goTypes = nil
	file_study_service_study_service_proto_depIdxs = nil
}
