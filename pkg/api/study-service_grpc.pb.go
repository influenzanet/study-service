// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: study_service/study-service.proto

package api

import (
	context "context"
	api_types "github.com/influenzanet/go-utils/pkg/api_types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudyServiceApiClient is the client API for StudyServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyServiceApiClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceStatus, error)
	// Study flow
	EnterStudy(ctx context.Context, in *EnterStudyRequest, opts ...grpc.CallOption) (*AssignedSurveys, error)
	GetAssignedSurveys(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*AssignedSurveys, error)
	GetAssignedSurvey(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*SurveyAndContext, error)
	SubmitResponse(ctx context.Context, in *SubmitResponseReq, opts ...grpc.CallOption) (*AssignedSurveys, error)
	LeaveStudy(ctx context.Context, in *LeaveStudyMsg, opts ...grpc.CallOption) (*AssignedSurveys, error)
	ProfileDeleted(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*ServiceStatus, error)
	DeleteParticipantData(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*ServiceStatus, error)
	UploadParticipantFile(ctx context.Context, opts ...grpc.CallOption) (StudyServiceApi_UploadParticipantFileClient, error)
	DeleteParticipantFiles(ctx context.Context, in *DeleteParticipantFilesReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	GetParticipantFile(ctx context.Context, in *GetParticipantFileReq, opts ...grpc.CallOption) (StudyServiceApi_GetParticipantFileClient, error)
	RegisterTemporaryParticipant(ctx context.Context, in *RegisterTempParticipantReq, opts ...grpc.CallOption) (*RegisterTempParticipantResponse, error)
	ConvertTemporaryToParticipant(ctx context.Context, in *ConvertTempParticipantReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	GetAssignedSurveysForTemporaryParticipant(ctx context.Context, in *GetAssignedSurveysForTemporaryParticipantReq, opts ...grpc.CallOption) (*AssignedSurveys, error)
	CreateReport(ctx context.Context, in *CreateReportReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	// for all profiles (also not active studies):
	GetStudiesForUser(ctx context.Context, in *GetStudiesForUserReq, opts ...grpc.CallOption) (*StudiesForUser, error)
	// all active studies even if user not in:
	GetActiveStudies(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*Studies, error)
	// get info about surveys in a study:
	GetStudySurveyInfos(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*SurveyInfoResp, error)
	// any user profile is in the study and one state matches condition:
	HasParticipantStateWithCondition(ctx context.Context, in *ProfilesWithConditionReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	GetParticipantMessages(ctx context.Context, in *GetParticipantMessagesReq, opts ...grpc.CallOption) (*StudyMessages, error)
	GetResearcherMessages(ctx context.Context, in *GetReseacherMessagesReq, opts ...grpc.CallOption) (*StudyMessages, error)
	DeleteMessagesFromParticipant(ctx context.Context, in *DeleteMessagesFromParticipantReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	DeleteResearcherMessages(ctx context.Context, in *DeleteResearcherMessagesReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	GetReportsForUser(ctx context.Context, in *GetReportsForUserReq, opts ...grpc.CallOption) (*ReportHistory, error)
	RemoveConfidentialResponsesForProfiles(ctx context.Context, in *RemoveConfidentialResponsesForProfilesReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	// ---> Study management
	CreateNewStudy(ctx context.Context, in *NewStudyRequest, opts ...grpc.CallOption) (*Study, error)
	GetAllStudies(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*Studies, error)
	GetStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*Study, error)
	// add, update and remove study members (and roles):
	SaveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error)
	RemoveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error)
	GetResearcherNotificationSubscriptions(ctx context.Context, in *GetResearcherNotificationSubscriptionsReq, opts ...grpc.CallOption) (*NotificationSubscriptions, error)
	UpdateResearcherNotificationSubscriptions(ctx context.Context, in *UpdateResearcherNotificationSubscriptionsReq, opts ...grpc.CallOption) (*NotificationSubscriptions, error)
	GetStudiesWithPendingParticipantMessages(ctx context.Context, in *GetStudiesWithPendingParticipantMessagesReq, opts ...grpc.CallOption) (*Studies, error)
	SaveStudyStatus(ctx context.Context, in *StudyStatusReq, opts ...grpc.CallOption) (*Study, error)
	SaveStudyProps(ctx context.Context, in *StudyPropsReq, opts ...grpc.CallOption) (*Study, error)
	SaveStudyRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*Study, error)
	GetCurrentStudyRules(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*StudyRules, error)
	GetStudyRulesHistory(ctx context.Context, in *StudyRulesHistoryReq, opts ...grpc.CallOption) (*StudyRulesHistory, error)
	RemoveStudyRulesVersion(ctx context.Context, in *StudyRulesVersionReferenceReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	SaveSurveyToStudy(ctx context.Context, in *AddSurveyReq, opts ...grpc.CallOption) (*Survey, error)
	GetSurveyVersionInfos(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*SurveyVersions, error)
	GetSurveyKeys(ctx context.Context, in *GetSurveyKeysRequest, opts ...grpc.CallOption) (*SurveyKeys, error)
	GetSurveyDefForStudy(ctx context.Context, in *SurveyVersionReferenceRequest, opts ...grpc.CallOption) (*Survey, error)
	RemoveSurveyVersion(ctx context.Context, in *SurveyVersionReferenceRequest, opts ...grpc.CallOption) (*ServiceStatus, error)
	UnpublishSurvey(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*ServiceStatus, error)
	DeleteStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*ServiceStatus, error)
	RunRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*RuleRunSummary, error)
	RunRulesForSingleParticipant(ctx context.Context, in *RunRulesForSingleParticipantReq, opts ...grpc.CallOption) (*RuleRunSummary, error)
	RunRulesForPreviousResponses(ctx context.Context, in *RunRulesForPreviousResponsesReq, opts ...grpc.CallOption) (*RuleRunSummary, error)
	// Data access:
	GetStudyResponseStatistics(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (*StudyResponseStatistics, error)
	StreamStudyResponses(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamStudyResponsesClient, error)
	StreamParticipantStates(ctx context.Context, in *ParticipantStateQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamParticipantStatesClient, error)
	GetParticipantStatesWithPagination(ctx context.Context, in *GetPStatesWithPaginationQuery, opts ...grpc.CallOption) (*ParticipantStatesWithPagination, error)
	GetParticipantStateByID(ctx context.Context, in *ParticipantStateByIDQuery, opts ...grpc.CallOption) (*ParticipantState, error)
	StreamReportHistory(ctx context.Context, in *ReportHistoryQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamReportHistoryClient, error)
	StreamParticipantFileInfos(ctx context.Context, in *FileInfoQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamParticipantFileInfosClient, error)
	GetConfidentialResponses(ctx context.Context, in *ConfidentialResponsesQuery, opts ...grpc.CallOption) (*ConfidentialResponses, error)
	GetResponsesWideFormatCSV(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesWideFormatCSVClient, error)
	GetResponsesLongFormatCSV(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesLongFormatCSVClient, error)
	GetResponsesFlatJSON(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesFlatJSONClient, error)
	GetResponsesFlatJSONWithPagination(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesFlatJSONWithPaginationClient, error)
	GetSurveyInfoPreviewCSV(ctx context.Context, in *SurveyInfoExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetSurveyInfoPreviewCSVClient, error)
	GetSurveyInfoPreview(ctx context.Context, in *SurveyInfoExportQuery, opts ...grpc.CallOption) (*SurveyInfoExport, error)
}

type studyServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyServiceApiClient(cc grpc.ClientConnInterface) StudyServiceApiClient {
	return &studyServiceApiClient{cc}
}

func (c *studyServiceApiClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) EnterStudy(ctx context.Context, in *EnterStudyRequest, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/EnterStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAssignedSurveys(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetAssignedSurveys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAssignedSurvey(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*SurveyAndContext, error) {
	out := new(SurveyAndContext)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetAssignedSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SubmitResponse(ctx context.Context, in *SubmitResponseReq, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SubmitResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) LeaveStudy(ctx context.Context, in *LeaveStudyMsg, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/LeaveStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) ProfileDeleted(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/ProfileDeleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) DeleteParticipantData(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/DeleteParticipantData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) UploadParticipantFile(ctx context.Context, opts ...grpc.CallOption) (StudyServiceApi_UploadParticipantFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[0], "/influenzanet.study_service.StudyServiceApi/UploadParticipantFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiUploadParticipantFileClient{stream}
	return x, nil
}

type StudyServiceApi_UploadParticipantFileClient interface {
	Send(*UploadParticipantFileReq) error
	CloseAndRecv() (*FileInfo, error)
	grpc.ClientStream
}

type studyServiceApiUploadParticipantFileClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiUploadParticipantFileClient) Send(m *UploadParticipantFileReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studyServiceApiUploadParticipantFileClient) CloseAndRecv() (*FileInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) DeleteParticipantFiles(ctx context.Context, in *DeleteParticipantFilesReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/DeleteParticipantFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetParticipantFile(ctx context.Context, in *GetParticipantFileReq, opts ...grpc.CallOption) (StudyServiceApi_GetParticipantFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[1], "/influenzanet.study_service.StudyServiceApi/GetParticipantFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetParticipantFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetParticipantFileClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetParticipantFileClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetParticipantFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) RegisterTemporaryParticipant(ctx context.Context, in *RegisterTempParticipantReq, opts ...grpc.CallOption) (*RegisterTempParticipantResponse, error) {
	out := new(RegisterTempParticipantResponse)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RegisterTemporaryParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) ConvertTemporaryToParticipant(ctx context.Context, in *ConvertTempParticipantReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/ConvertTemporaryToParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAssignedSurveysForTemporaryParticipant(ctx context.Context, in *GetAssignedSurveysForTemporaryParticipantReq, opts ...grpc.CallOption) (*AssignedSurveys, error) {
	out := new(AssignedSurveys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetAssignedSurveysForTemporaryParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) CreateReport(ctx context.Context, in *CreateReportReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/CreateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudiesForUser(ctx context.Context, in *GetStudiesForUserReq, opts ...grpc.CallOption) (*StudiesForUser, error) {
	out := new(StudiesForUser)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudiesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetActiveStudies(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*Studies, error) {
	out := new(Studies)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetActiveStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudySurveyInfos(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*SurveyInfoResp, error) {
	out := new(SurveyInfoResp)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudySurveyInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) HasParticipantStateWithCondition(ctx context.Context, in *ProfilesWithConditionReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/HasParticipantStateWithCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetParticipantMessages(ctx context.Context, in *GetParticipantMessagesReq, opts ...grpc.CallOption) (*StudyMessages, error) {
	out := new(StudyMessages)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetParticipantMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetResearcherMessages(ctx context.Context, in *GetReseacherMessagesReq, opts ...grpc.CallOption) (*StudyMessages, error) {
	out := new(StudyMessages)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetResearcherMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) DeleteMessagesFromParticipant(ctx context.Context, in *DeleteMessagesFromParticipantReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/DeleteMessagesFromParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) DeleteResearcherMessages(ctx context.Context, in *DeleteResearcherMessagesReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/DeleteResearcherMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetReportsForUser(ctx context.Context, in *GetReportsForUserReq, opts ...grpc.CallOption) (*ReportHistory, error) {
	out := new(ReportHistory)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetReportsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RemoveConfidentialResponsesForProfiles(ctx context.Context, in *RemoveConfidentialResponsesForProfilesReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RemoveConfidentialResponsesForProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) CreateNewStudy(ctx context.Context, in *NewStudyRequest, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/CreateNewStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetAllStudies(ctx context.Context, in *api_types.TokenInfos, opts ...grpc.CallOption) (*Studies, error) {
	out := new(Studies)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetAllStudies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveStudyMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RemoveStudyMember(ctx context.Context, in *StudyMemberReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RemoveStudyMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetResearcherNotificationSubscriptions(ctx context.Context, in *GetResearcherNotificationSubscriptionsReq, opts ...grpc.CallOption) (*NotificationSubscriptions, error) {
	out := new(NotificationSubscriptions)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetResearcherNotificationSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) UpdateResearcherNotificationSubscriptions(ctx context.Context, in *UpdateResearcherNotificationSubscriptionsReq, opts ...grpc.CallOption) (*NotificationSubscriptions, error) {
	out := new(NotificationSubscriptions)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/UpdateResearcherNotificationSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudiesWithPendingParticipantMessages(ctx context.Context, in *GetStudiesWithPendingParticipantMessagesReq, opts ...grpc.CallOption) (*Studies, error) {
	out := new(Studies)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudiesWithPendingParticipantMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyStatus(ctx context.Context, in *StudyStatusReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveStudyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyProps(ctx context.Context, in *StudyPropsReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveStudyProps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveStudyRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*Study, error) {
	out := new(Study)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveStudyRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetCurrentStudyRules(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*StudyRules, error) {
	out := new(StudyRules)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetCurrentStudyRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudyRulesHistory(ctx context.Context, in *StudyRulesHistoryReq, opts ...grpc.CallOption) (*StudyRulesHistory, error) {
	out := new(StudyRulesHistory)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudyRulesHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RemoveStudyRulesVersion(ctx context.Context, in *StudyRulesVersionReferenceReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RemoveStudyRulesVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) SaveSurveyToStudy(ctx context.Context, in *AddSurveyReq, opts ...grpc.CallOption) (*Survey, error) {
	out := new(Survey)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/SaveSurveyToStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetSurveyVersionInfos(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*SurveyVersions, error) {
	out := new(SurveyVersions)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetSurveyVersionInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetSurveyKeys(ctx context.Context, in *GetSurveyKeysRequest, opts ...grpc.CallOption) (*SurveyKeys, error) {
	out := new(SurveyKeys)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetSurveyKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetSurveyDefForStudy(ctx context.Context, in *SurveyVersionReferenceRequest, opts ...grpc.CallOption) (*Survey, error) {
	out := new(Survey)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetSurveyDefForStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RemoveSurveyVersion(ctx context.Context, in *SurveyVersionReferenceRequest, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RemoveSurveyVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) UnpublishSurvey(ctx context.Context, in *SurveyReferenceRequest, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/UnpublishSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) DeleteStudy(ctx context.Context, in *StudyReferenceReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/DeleteStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RunRules(ctx context.Context, in *StudyRulesReq, opts ...grpc.CallOption) (*RuleRunSummary, error) {
	out := new(RuleRunSummary)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RunRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RunRulesForSingleParticipant(ctx context.Context, in *RunRulesForSingleParticipantReq, opts ...grpc.CallOption) (*RuleRunSummary, error) {
	out := new(RuleRunSummary)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RunRulesForSingleParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) RunRulesForPreviousResponses(ctx context.Context, in *RunRulesForPreviousResponsesReq, opts ...grpc.CallOption) (*RuleRunSummary, error) {
	out := new(RuleRunSummary)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/RunRulesForPreviousResponses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetStudyResponseStatistics(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (*StudyResponseStatistics, error) {
	out := new(StudyResponseStatistics)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetStudyResponseStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) StreamStudyResponses(ctx context.Context, in *SurveyResponseQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamStudyResponsesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[2], "/influenzanet.study_service.StudyServiceApi/StreamStudyResponses", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiStreamStudyResponsesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_StreamStudyResponsesClient interface {
	Recv() (*SurveyResponse, error)
	grpc.ClientStream
}

type studyServiceApiStreamStudyResponsesClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiStreamStudyResponsesClient) Recv() (*SurveyResponse, error) {
	m := new(SurveyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) StreamParticipantStates(ctx context.Context, in *ParticipantStateQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamParticipantStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[3], "/influenzanet.study_service.StudyServiceApi/StreamParticipantStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiStreamParticipantStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_StreamParticipantStatesClient interface {
	Recv() (*ParticipantState, error)
	grpc.ClientStream
}

type studyServiceApiStreamParticipantStatesClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiStreamParticipantStatesClient) Recv() (*ParticipantState, error) {
	m := new(ParticipantState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetParticipantStatesWithPagination(ctx context.Context, in *GetPStatesWithPaginationQuery, opts ...grpc.CallOption) (*ParticipantStatesWithPagination, error) {
	out := new(ParticipantStatesWithPagination)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetParticipantStatesWithPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetParticipantStateByID(ctx context.Context, in *ParticipantStateByIDQuery, opts ...grpc.CallOption) (*ParticipantState, error) {
	out := new(ParticipantState)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetParticipantStateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) StreamReportHistory(ctx context.Context, in *ReportHistoryQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamReportHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[4], "/influenzanet.study_service.StudyServiceApi/StreamReportHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiStreamReportHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_StreamReportHistoryClient interface {
	Recv() (*Report, error)
	grpc.ClientStream
}

type studyServiceApiStreamReportHistoryClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiStreamReportHistoryClient) Recv() (*Report, error) {
	m := new(Report)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) StreamParticipantFileInfos(ctx context.Context, in *FileInfoQuery, opts ...grpc.CallOption) (StudyServiceApi_StreamParticipantFileInfosClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[5], "/influenzanet.study_service.StudyServiceApi/StreamParticipantFileInfos", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiStreamParticipantFileInfosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_StreamParticipantFileInfosClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type studyServiceApiStreamParticipantFileInfosClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiStreamParticipantFileInfosClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetConfidentialResponses(ctx context.Context, in *ConfidentialResponsesQuery, opts ...grpc.CallOption) (*ConfidentialResponses, error) {
	out := new(ConfidentialResponses)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetConfidentialResponses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceApiClient) GetResponsesWideFormatCSV(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesWideFormatCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[6], "/influenzanet.study_service.StudyServiceApi/GetResponsesWideFormatCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetResponsesWideFormatCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetResponsesWideFormatCSVClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetResponsesWideFormatCSVClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetResponsesWideFormatCSVClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetResponsesLongFormatCSV(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesLongFormatCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[7], "/influenzanet.study_service.StudyServiceApi/GetResponsesLongFormatCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetResponsesLongFormatCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetResponsesLongFormatCSVClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetResponsesLongFormatCSVClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetResponsesLongFormatCSVClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetResponsesFlatJSON(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesFlatJSONClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[8], "/influenzanet.study_service.StudyServiceApi/GetResponsesFlatJSON", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetResponsesFlatJSONClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetResponsesFlatJSONClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetResponsesFlatJSONClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetResponsesFlatJSONClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetResponsesFlatJSONWithPagination(ctx context.Context, in *ResponseExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetResponsesFlatJSONWithPaginationClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[9], "/influenzanet.study_service.StudyServiceApi/GetResponsesFlatJSONWithPagination", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetResponsesFlatJSONWithPaginationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetResponsesFlatJSONWithPaginationClient interface {
	Recv() (*PaginatedFile, error)
	grpc.ClientStream
}

type studyServiceApiGetResponsesFlatJSONWithPaginationClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetResponsesFlatJSONWithPaginationClient) Recv() (*PaginatedFile, error) {
	m := new(PaginatedFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetSurveyInfoPreviewCSV(ctx context.Context, in *SurveyInfoExportQuery, opts ...grpc.CallOption) (StudyServiceApi_GetSurveyInfoPreviewCSVClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudyServiceApi_ServiceDesc.Streams[10], "/influenzanet.study_service.StudyServiceApi/GetSurveyInfoPreviewCSV", opts...)
	if err != nil {
		return nil, err
	}
	x := &studyServiceApiGetSurveyInfoPreviewCSVClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudyServiceApi_GetSurveyInfoPreviewCSVClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type studyServiceApiGetSurveyInfoPreviewCSVClient struct {
	grpc.ClientStream
}

func (x *studyServiceApiGetSurveyInfoPreviewCSVClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studyServiceApiClient) GetSurveyInfoPreview(ctx context.Context, in *SurveyInfoExportQuery, opts ...grpc.CallOption) (*SurveyInfoExport, error) {
	out := new(SurveyInfoExport)
	err := c.cc.Invoke(ctx, "/influenzanet.study_service.StudyServiceApi/GetSurveyInfoPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyServiceApiServer is the server API for StudyServiceApi service.
// All implementations must embed UnimplementedStudyServiceApiServer
// for forward compatibility
type StudyServiceApiServer interface {
	Status(context.Context, *emptypb.Empty) (*ServiceStatus, error)
	// Study flow
	EnterStudy(context.Context, *EnterStudyRequest) (*AssignedSurveys, error)
	GetAssignedSurveys(context.Context, *api_types.TokenInfos) (*AssignedSurveys, error)
	GetAssignedSurvey(context.Context, *SurveyReferenceRequest) (*SurveyAndContext, error)
	SubmitResponse(context.Context, *SubmitResponseReq) (*AssignedSurveys, error)
	LeaveStudy(context.Context, *LeaveStudyMsg) (*AssignedSurveys, error)
	ProfileDeleted(context.Context, *api_types.TokenInfos) (*ServiceStatus, error)
	DeleteParticipantData(context.Context, *api_types.TokenInfos) (*ServiceStatus, error)
	UploadParticipantFile(StudyServiceApi_UploadParticipantFileServer) error
	DeleteParticipantFiles(context.Context, *DeleteParticipantFilesReq) (*ServiceStatus, error)
	GetParticipantFile(*GetParticipantFileReq, StudyServiceApi_GetParticipantFileServer) error
	RegisterTemporaryParticipant(context.Context, *RegisterTempParticipantReq) (*RegisterTempParticipantResponse, error)
	ConvertTemporaryToParticipant(context.Context, *ConvertTempParticipantReq) (*ServiceStatus, error)
	GetAssignedSurveysForTemporaryParticipant(context.Context, *GetAssignedSurveysForTemporaryParticipantReq) (*AssignedSurveys, error)
	CreateReport(context.Context, *CreateReportReq) (*ServiceStatus, error)
	// for all profiles (also not active studies):
	GetStudiesForUser(context.Context, *GetStudiesForUserReq) (*StudiesForUser, error)
	// all active studies even if user not in:
	GetActiveStudies(context.Context, *api_types.TokenInfos) (*Studies, error)
	// get info about surveys in a study:
	GetStudySurveyInfos(context.Context, *StudyReferenceReq) (*SurveyInfoResp, error)
	// any user profile is in the study and one state matches condition:
	HasParticipantStateWithCondition(context.Context, *ProfilesWithConditionReq) (*ServiceStatus, error)
	GetParticipantMessages(context.Context, *GetParticipantMessagesReq) (*StudyMessages, error)
	GetResearcherMessages(context.Context, *GetReseacherMessagesReq) (*StudyMessages, error)
	DeleteMessagesFromParticipant(context.Context, *DeleteMessagesFromParticipantReq) (*ServiceStatus, error)
	DeleteResearcherMessages(context.Context, *DeleteResearcherMessagesReq) (*ServiceStatus, error)
	GetReportsForUser(context.Context, *GetReportsForUserReq) (*ReportHistory, error)
	RemoveConfidentialResponsesForProfiles(context.Context, *RemoveConfidentialResponsesForProfilesReq) (*ServiceStatus, error)
	// ---> Study management
	CreateNewStudy(context.Context, *NewStudyRequest) (*Study, error)
	GetAllStudies(context.Context, *api_types.TokenInfos) (*Studies, error)
	GetStudy(context.Context, *StudyReferenceReq) (*Study, error)
	// add, update and remove study members (and roles):
	SaveStudyMember(context.Context, *StudyMemberReq) (*Study, error)
	RemoveStudyMember(context.Context, *StudyMemberReq) (*Study, error)
	GetResearcherNotificationSubscriptions(context.Context, *GetResearcherNotificationSubscriptionsReq) (*NotificationSubscriptions, error)
	UpdateResearcherNotificationSubscriptions(context.Context, *UpdateResearcherNotificationSubscriptionsReq) (*NotificationSubscriptions, error)
	GetStudiesWithPendingParticipantMessages(context.Context, *GetStudiesWithPendingParticipantMessagesReq) (*Studies, error)
	SaveStudyStatus(context.Context, *StudyStatusReq) (*Study, error)
	SaveStudyProps(context.Context, *StudyPropsReq) (*Study, error)
	SaveStudyRules(context.Context, *StudyRulesReq) (*Study, error)
	GetCurrentStudyRules(context.Context, *StudyReferenceReq) (*StudyRules, error)
	GetStudyRulesHistory(context.Context, *StudyRulesHistoryReq) (*StudyRulesHistory, error)
	RemoveStudyRulesVersion(context.Context, *StudyRulesVersionReferenceReq) (*ServiceStatus, error)
	SaveSurveyToStudy(context.Context, *AddSurveyReq) (*Survey, error)
	GetSurveyVersionInfos(context.Context, *SurveyReferenceRequest) (*SurveyVersions, error)
	GetSurveyKeys(context.Context, *GetSurveyKeysRequest) (*SurveyKeys, error)
	GetSurveyDefForStudy(context.Context, *SurveyVersionReferenceRequest) (*Survey, error)
	RemoveSurveyVersion(context.Context, *SurveyVersionReferenceRequest) (*ServiceStatus, error)
	UnpublishSurvey(context.Context, *SurveyReferenceRequest) (*ServiceStatus, error)
	DeleteStudy(context.Context, *StudyReferenceReq) (*ServiceStatus, error)
	RunRules(context.Context, *StudyRulesReq) (*RuleRunSummary, error)
	RunRulesForSingleParticipant(context.Context, *RunRulesForSingleParticipantReq) (*RuleRunSummary, error)
	RunRulesForPreviousResponses(context.Context, *RunRulesForPreviousResponsesReq) (*RuleRunSummary, error)
	// Data access:
	GetStudyResponseStatistics(context.Context, *SurveyResponseQuery) (*StudyResponseStatistics, error)
	StreamStudyResponses(*SurveyResponseQuery, StudyServiceApi_StreamStudyResponsesServer) error
	StreamParticipantStates(*ParticipantStateQuery, StudyServiceApi_StreamParticipantStatesServer) error
	GetParticipantStatesWithPagination(context.Context, *GetPStatesWithPaginationQuery) (*ParticipantStatesWithPagination, error)
	GetParticipantStateByID(context.Context, *ParticipantStateByIDQuery) (*ParticipantState, error)
	StreamReportHistory(*ReportHistoryQuery, StudyServiceApi_StreamReportHistoryServer) error
	StreamParticipantFileInfos(*FileInfoQuery, StudyServiceApi_StreamParticipantFileInfosServer) error
	GetConfidentialResponses(context.Context, *ConfidentialResponsesQuery) (*ConfidentialResponses, error)
	GetResponsesWideFormatCSV(*ResponseExportQuery, StudyServiceApi_GetResponsesWideFormatCSVServer) error
	GetResponsesLongFormatCSV(*ResponseExportQuery, StudyServiceApi_GetResponsesLongFormatCSVServer) error
	GetResponsesFlatJSON(*ResponseExportQuery, StudyServiceApi_GetResponsesFlatJSONServer) error
	GetResponsesFlatJSONWithPagination(*ResponseExportQuery, StudyServiceApi_GetResponsesFlatJSONWithPaginationServer) error
	GetSurveyInfoPreviewCSV(*SurveyInfoExportQuery, StudyServiceApi_GetSurveyInfoPreviewCSVServer) error
	GetSurveyInfoPreview(context.Context, *SurveyInfoExportQuery) (*SurveyInfoExport, error)
	mustEmbedUnimplementedStudyServiceApiServer()
}

// UnimplementedStudyServiceApiServer must be embedded to have forward compatible implementations.
type UnimplementedStudyServiceApiServer struct {
}

func (UnimplementedStudyServiceApiServer) Status(context.Context, *emptypb.Empty) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedStudyServiceApiServer) EnterStudy(context.Context, *EnterStudyRequest) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterStudy not implemented")
}
func (UnimplementedStudyServiceApiServer) GetAssignedSurveys(context.Context, *api_types.TokenInfos) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSurveys not implemented")
}
func (UnimplementedStudyServiceApiServer) GetAssignedSurvey(context.Context, *SurveyReferenceRequest) (*SurveyAndContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSurvey not implemented")
}
func (UnimplementedStudyServiceApiServer) SubmitResponse(context.Context, *SubmitResponseReq) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResponse not implemented")
}
func (UnimplementedStudyServiceApiServer) LeaveStudy(context.Context, *LeaveStudyMsg) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveStudy not implemented")
}
func (UnimplementedStudyServiceApiServer) ProfileDeleted(context.Context, *api_types.TokenInfos) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileDeleted not implemented")
}
func (UnimplementedStudyServiceApiServer) DeleteParticipantData(context.Context, *api_types.TokenInfos) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParticipantData not implemented")
}
func (UnimplementedStudyServiceApiServer) UploadParticipantFile(StudyServiceApi_UploadParticipantFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadParticipantFile not implemented")
}
func (UnimplementedStudyServiceApiServer) DeleteParticipantFiles(context.Context, *DeleteParticipantFilesReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParticipantFiles not implemented")
}
func (UnimplementedStudyServiceApiServer) GetParticipantFile(*GetParticipantFileReq, StudyServiceApi_GetParticipantFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetParticipantFile not implemented")
}
func (UnimplementedStudyServiceApiServer) RegisterTemporaryParticipant(context.Context, *RegisterTempParticipantReq) (*RegisterTempParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTemporaryParticipant not implemented")
}
func (UnimplementedStudyServiceApiServer) ConvertTemporaryToParticipant(context.Context, *ConvertTempParticipantReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertTemporaryToParticipant not implemented")
}
func (UnimplementedStudyServiceApiServer) GetAssignedSurveysForTemporaryParticipant(context.Context, *GetAssignedSurveysForTemporaryParticipantReq) (*AssignedSurveys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedSurveysForTemporaryParticipant not implemented")
}
func (UnimplementedStudyServiceApiServer) CreateReport(context.Context, *CreateReportReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (UnimplementedStudyServiceApiServer) GetStudiesForUser(context.Context, *GetStudiesForUserReq) (*StudiesForUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudiesForUser not implemented")
}
func (UnimplementedStudyServiceApiServer) GetActiveStudies(context.Context, *api_types.TokenInfos) (*Studies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveStudies not implemented")
}
func (UnimplementedStudyServiceApiServer) GetStudySurveyInfos(context.Context, *StudyReferenceReq) (*SurveyInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudySurveyInfos not implemented")
}
func (UnimplementedStudyServiceApiServer) HasParticipantStateWithCondition(context.Context, *ProfilesWithConditionReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasParticipantStateWithCondition not implemented")
}
func (UnimplementedStudyServiceApiServer) GetParticipantMessages(context.Context, *GetParticipantMessagesReq) (*StudyMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantMessages not implemented")
}
func (UnimplementedStudyServiceApiServer) GetResearcherMessages(context.Context, *GetReseacherMessagesReq) (*StudyMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResearcherMessages not implemented")
}
func (UnimplementedStudyServiceApiServer) DeleteMessagesFromParticipant(context.Context, *DeleteMessagesFromParticipantReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessagesFromParticipant not implemented")
}
func (UnimplementedStudyServiceApiServer) DeleteResearcherMessages(context.Context, *DeleteResearcherMessagesReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResearcherMessages not implemented")
}
func (UnimplementedStudyServiceApiServer) GetReportsForUser(context.Context, *GetReportsForUserReq) (*ReportHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportsForUser not implemented")
}
func (UnimplementedStudyServiceApiServer) RemoveConfidentialResponsesForProfiles(context.Context, *RemoveConfidentialResponsesForProfilesReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConfidentialResponsesForProfiles not implemented")
}
func (UnimplementedStudyServiceApiServer) CreateNewStudy(context.Context, *NewStudyRequest) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewStudy not implemented")
}
func (UnimplementedStudyServiceApiServer) GetAllStudies(context.Context, *api_types.TokenInfos) (*Studies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudies not implemented")
}
func (UnimplementedStudyServiceApiServer) GetStudy(context.Context, *StudyReferenceReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudy not implemented")
}
func (UnimplementedStudyServiceApiServer) SaveStudyMember(context.Context, *StudyMemberReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyMember not implemented")
}
func (UnimplementedStudyServiceApiServer) RemoveStudyMember(context.Context, *StudyMemberReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStudyMember not implemented")
}
func (UnimplementedStudyServiceApiServer) GetResearcherNotificationSubscriptions(context.Context, *GetResearcherNotificationSubscriptionsReq) (*NotificationSubscriptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResearcherNotificationSubscriptions not implemented")
}
func (UnimplementedStudyServiceApiServer) UpdateResearcherNotificationSubscriptions(context.Context, *UpdateResearcherNotificationSubscriptionsReq) (*NotificationSubscriptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResearcherNotificationSubscriptions not implemented")
}
func (UnimplementedStudyServiceApiServer) GetStudiesWithPendingParticipantMessages(context.Context, *GetStudiesWithPendingParticipantMessagesReq) (*Studies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudiesWithPendingParticipantMessages not implemented")
}
func (UnimplementedStudyServiceApiServer) SaveStudyStatus(context.Context, *StudyStatusReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyStatus not implemented")
}
func (UnimplementedStudyServiceApiServer) SaveStudyProps(context.Context, *StudyPropsReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyProps not implemented")
}
func (UnimplementedStudyServiceApiServer) SaveStudyRules(context.Context, *StudyRulesReq) (*Study, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyRules not implemented")
}
func (UnimplementedStudyServiceApiServer) GetCurrentStudyRules(context.Context, *StudyReferenceReq) (*StudyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentStudyRules not implemented")
}
func (UnimplementedStudyServiceApiServer) GetStudyRulesHistory(context.Context, *StudyRulesHistoryReq) (*StudyRulesHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyRulesHistory not implemented")
}
func (UnimplementedStudyServiceApiServer) RemoveStudyRulesVersion(context.Context, *StudyRulesVersionReferenceReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStudyRulesVersion not implemented")
}
func (UnimplementedStudyServiceApiServer) SaveSurveyToStudy(context.Context, *AddSurveyReq) (*Survey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSurveyToStudy not implemented")
}
func (UnimplementedStudyServiceApiServer) GetSurveyVersionInfos(context.Context, *SurveyReferenceRequest) (*SurveyVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyVersionInfos not implemented")
}
func (UnimplementedStudyServiceApiServer) GetSurveyKeys(context.Context, *GetSurveyKeysRequest) (*SurveyKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyKeys not implemented")
}
func (UnimplementedStudyServiceApiServer) GetSurveyDefForStudy(context.Context, *SurveyVersionReferenceRequest) (*Survey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyDefForStudy not implemented")
}
func (UnimplementedStudyServiceApiServer) RemoveSurveyVersion(context.Context, *SurveyVersionReferenceRequest) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSurveyVersion not implemented")
}
func (UnimplementedStudyServiceApiServer) UnpublishSurvey(context.Context, *SurveyReferenceRequest) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishSurvey not implemented")
}
func (UnimplementedStudyServiceApiServer) DeleteStudy(context.Context, *StudyReferenceReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudy not implemented")
}
func (UnimplementedStudyServiceApiServer) RunRules(context.Context, *StudyRulesReq) (*RuleRunSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRules not implemented")
}
func (UnimplementedStudyServiceApiServer) RunRulesForSingleParticipant(context.Context, *RunRulesForSingleParticipantReq) (*RuleRunSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRulesForSingleParticipant not implemented")
}
func (UnimplementedStudyServiceApiServer) RunRulesForPreviousResponses(context.Context, *RunRulesForPreviousResponsesReq) (*RuleRunSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunRulesForPreviousResponses not implemented")
}
func (UnimplementedStudyServiceApiServer) GetStudyResponseStatistics(context.Context, *SurveyResponseQuery) (*StudyResponseStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyResponseStatistics not implemented")
}
func (UnimplementedStudyServiceApiServer) StreamStudyResponses(*SurveyResponseQuery, StudyServiceApi_StreamStudyResponsesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStudyResponses not implemented")
}
func (UnimplementedStudyServiceApiServer) StreamParticipantStates(*ParticipantStateQuery, StudyServiceApi_StreamParticipantStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamParticipantStates not implemented")
}
func (UnimplementedStudyServiceApiServer) GetParticipantStatesWithPagination(context.Context, *GetPStatesWithPaginationQuery) (*ParticipantStatesWithPagination, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantStatesWithPagination not implemented")
}
func (UnimplementedStudyServiceApiServer) GetParticipantStateByID(context.Context, *ParticipantStateByIDQuery) (*ParticipantState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantStateByID not implemented")
}
func (UnimplementedStudyServiceApiServer) StreamReportHistory(*ReportHistoryQuery, StudyServiceApi_StreamReportHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReportHistory not implemented")
}
func (UnimplementedStudyServiceApiServer) StreamParticipantFileInfos(*FileInfoQuery, StudyServiceApi_StreamParticipantFileInfosServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamParticipantFileInfos not implemented")
}
func (UnimplementedStudyServiceApiServer) GetConfidentialResponses(context.Context, *ConfidentialResponsesQuery) (*ConfidentialResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfidentialResponses not implemented")
}
func (UnimplementedStudyServiceApiServer) GetResponsesWideFormatCSV(*ResponseExportQuery, StudyServiceApi_GetResponsesWideFormatCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResponsesWideFormatCSV not implemented")
}
func (UnimplementedStudyServiceApiServer) GetResponsesLongFormatCSV(*ResponseExportQuery, StudyServiceApi_GetResponsesLongFormatCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResponsesLongFormatCSV not implemented")
}
func (UnimplementedStudyServiceApiServer) GetResponsesFlatJSON(*ResponseExportQuery, StudyServiceApi_GetResponsesFlatJSONServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResponsesFlatJSON not implemented")
}
func (UnimplementedStudyServiceApiServer) GetResponsesFlatJSONWithPagination(*ResponseExportQuery, StudyServiceApi_GetResponsesFlatJSONWithPaginationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResponsesFlatJSONWithPagination not implemented")
}
func (UnimplementedStudyServiceApiServer) GetSurveyInfoPreviewCSV(*SurveyInfoExportQuery, StudyServiceApi_GetSurveyInfoPreviewCSVServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSurveyInfoPreviewCSV not implemented")
}
func (UnimplementedStudyServiceApiServer) GetSurveyInfoPreview(context.Context, *SurveyInfoExportQuery) (*SurveyInfoExport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyInfoPreview not implemented")
}
func (UnimplementedStudyServiceApiServer) mustEmbedUnimplementedStudyServiceApiServer() {}

// UnsafeStudyServiceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyServiceApiServer will
// result in compilation errors.
type UnsafeStudyServiceApiServer interface {
	mustEmbedUnimplementedStudyServiceApiServer()
}

func RegisterStudyServiceApiServer(s grpc.ServiceRegistrar, srv StudyServiceApiServer) {
	s.RegisterService(&StudyServiceApi_ServiceDesc, srv)
}

func _StudyServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_EnterStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).EnterStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/EnterStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).EnterStudy(ctx, req.(*EnterStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAssignedSurveys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAssignedSurveys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetAssignedSurveys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAssignedSurveys(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAssignedSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAssignedSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetAssignedSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAssignedSurvey(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SubmitResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResponseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SubmitResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SubmitResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SubmitResponse(ctx, req.(*SubmitResponseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_LeaveStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveStudyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).LeaveStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/LeaveStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).LeaveStudy(ctx, req.(*LeaveStudyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_ProfileDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).ProfileDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/ProfileDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).ProfileDeleted(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_DeleteParticipantData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).DeleteParticipantData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/DeleteParticipantData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).DeleteParticipantData(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_UploadParticipantFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudyServiceApiServer).UploadParticipantFile(&studyServiceApiUploadParticipantFileServer{stream})
}

type StudyServiceApi_UploadParticipantFileServer interface {
	SendAndClose(*FileInfo) error
	Recv() (*UploadParticipantFileReq, error)
	grpc.ServerStream
}

type studyServiceApiUploadParticipantFileServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiUploadParticipantFileServer) SendAndClose(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studyServiceApiUploadParticipantFileServer) Recv() (*UploadParticipantFileReq, error) {
	m := new(UploadParticipantFileReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudyServiceApi_DeleteParticipantFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParticipantFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).DeleteParticipantFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/DeleteParticipantFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).DeleteParticipantFiles(ctx, req.(*DeleteParticipantFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetParticipantFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetParticipantFileReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetParticipantFile(m, &studyServiceApiGetParticipantFileServer{stream})
}

type StudyServiceApi_GetParticipantFileServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetParticipantFileServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetParticipantFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_RegisterTemporaryParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTempParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RegisterTemporaryParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RegisterTemporaryParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RegisterTemporaryParticipant(ctx, req.(*RegisterTempParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_ConvertTemporaryToParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertTempParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).ConvertTemporaryToParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/ConvertTemporaryToParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).ConvertTemporaryToParticipant(ctx, req.(*ConvertTempParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAssignedSurveysForTemporaryParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedSurveysForTemporaryParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAssignedSurveysForTemporaryParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetAssignedSurveysForTemporaryParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAssignedSurveysForTemporaryParticipant(ctx, req.(*GetAssignedSurveysForTemporaryParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/CreateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).CreateReport(ctx, req.(*CreateReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudiesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudiesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudiesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudiesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudiesForUser(ctx, req.(*GetStudiesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetActiveStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetActiveStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetActiveStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetActiveStudies(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudySurveyInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudySurveyInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudySurveyInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudySurveyInfos(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_HasParticipantStateWithCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfilesWithConditionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).HasParticipantStateWithCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/HasParticipantStateWithCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).HasParticipantStateWithCondition(ctx, req.(*ProfilesWithConditionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetParticipantMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParticipantMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetParticipantMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetParticipantMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetParticipantMessages(ctx, req.(*GetParticipantMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetResearcherMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReseacherMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetResearcherMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetResearcherMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetResearcherMessages(ctx, req.(*GetReseacherMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_DeleteMessagesFromParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessagesFromParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).DeleteMessagesFromParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/DeleteMessagesFromParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).DeleteMessagesFromParticipant(ctx, req.(*DeleteMessagesFromParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_DeleteResearcherMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResearcherMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).DeleteResearcherMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/DeleteResearcherMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).DeleteResearcherMessages(ctx, req.(*DeleteResearcherMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetReportsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportsForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetReportsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetReportsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetReportsForUser(ctx, req.(*GetReportsForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RemoveConfidentialResponsesForProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConfidentialResponsesForProfilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RemoveConfidentialResponsesForProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RemoveConfidentialResponsesForProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RemoveConfidentialResponsesForProfiles(ctx, req.(*RemoveConfidentialResponsesForProfilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_CreateNewStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).CreateNewStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/CreateNewStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).CreateNewStudy(ctx, req.(*NewStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetAllStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api_types.TokenInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetAllStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetAllStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetAllStudies(ctx, req.(*api_types.TokenInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudy(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveStudyMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyMember(ctx, req.(*StudyMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RemoveStudyMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RemoveStudyMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RemoveStudyMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RemoveStudyMember(ctx, req.(*StudyMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetResearcherNotificationSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResearcherNotificationSubscriptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetResearcherNotificationSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetResearcherNotificationSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetResearcherNotificationSubscriptions(ctx, req.(*GetResearcherNotificationSubscriptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_UpdateResearcherNotificationSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResearcherNotificationSubscriptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).UpdateResearcherNotificationSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/UpdateResearcherNotificationSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).UpdateResearcherNotificationSubscriptions(ctx, req.(*UpdateResearcherNotificationSubscriptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudiesWithPendingParticipantMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudiesWithPendingParticipantMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudiesWithPendingParticipantMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudiesWithPendingParticipantMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudiesWithPendingParticipantMessages(ctx, req.(*GetStudiesWithPendingParticipantMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveStudyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyStatus(ctx, req.(*StudyStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyPropsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveStudyProps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyProps(ctx, req.(*StudyPropsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveStudyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveStudyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveStudyRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveStudyRules(ctx, req.(*StudyRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetCurrentStudyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetCurrentStudyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetCurrentStudyRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetCurrentStudyRules(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudyRulesHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyRulesHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudyRulesHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudyRulesHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudyRulesHistory(ctx, req.(*StudyRulesHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RemoveStudyRulesVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyRulesVersionReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RemoveStudyRulesVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RemoveStudyRulesVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RemoveStudyRulesVersion(ctx, req.(*StudyRulesVersionReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_SaveSurveyToStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSurveyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).SaveSurveyToStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/SaveSurveyToStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).SaveSurveyToStudy(ctx, req.(*AddSurveyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetSurveyVersionInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetSurveyVersionInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetSurveyVersionInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetSurveyVersionInfos(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetSurveyKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetSurveyKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetSurveyKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetSurveyKeys(ctx, req.(*GetSurveyKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetSurveyDefForStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyVersionReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetSurveyDefForStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetSurveyDefForStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetSurveyDefForStudy(ctx, req.(*SurveyVersionReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RemoveSurveyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyVersionReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RemoveSurveyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RemoveSurveyVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RemoveSurveyVersion(ctx, req.(*SurveyVersionReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_UnpublishSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).UnpublishSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/UnpublishSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).UnpublishSurvey(ctx, req.(*SurveyReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_DeleteStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyReferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).DeleteStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/DeleteStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).DeleteStudy(ctx, req.(*StudyReferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RunRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RunRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RunRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RunRules(ctx, req.(*StudyRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RunRulesForSingleParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRulesForSingleParticipantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RunRulesForSingleParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RunRulesForSingleParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RunRulesForSingleParticipant(ctx, req.(*RunRulesForSingleParticipantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_RunRulesForPreviousResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRulesForPreviousResponsesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).RunRulesForPreviousResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/RunRulesForPreviousResponses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).RunRulesForPreviousResponses(ctx, req.(*RunRulesForPreviousResponsesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetStudyResponseStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyResponseQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetStudyResponseStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetStudyResponseStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetStudyResponseStatistics(ctx, req.(*SurveyResponseQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_StreamStudyResponses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SurveyResponseQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).StreamStudyResponses(m, &studyServiceApiStreamStudyResponsesServer{stream})
}

type StudyServiceApi_StreamStudyResponsesServer interface {
	Send(*SurveyResponse) error
	grpc.ServerStream
}

type studyServiceApiStreamStudyResponsesServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiStreamStudyResponsesServer) Send(m *SurveyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_StreamParticipantStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ParticipantStateQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).StreamParticipantStates(m, &studyServiceApiStreamParticipantStatesServer{stream})
}

type StudyServiceApi_StreamParticipantStatesServer interface {
	Send(*ParticipantState) error
	grpc.ServerStream
}

type studyServiceApiStreamParticipantStatesServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiStreamParticipantStatesServer) Send(m *ParticipantState) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetParticipantStatesWithPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPStatesWithPaginationQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetParticipantStatesWithPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetParticipantStatesWithPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetParticipantStatesWithPagination(ctx, req.(*GetPStatesWithPaginationQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetParticipantStateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantStateByIDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetParticipantStateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetParticipantStateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetParticipantStateByID(ctx, req.(*ParticipantStateByIDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_StreamReportHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReportHistoryQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).StreamReportHistory(m, &studyServiceApiStreamReportHistoryServer{stream})
}

type StudyServiceApi_StreamReportHistoryServer interface {
	Send(*Report) error
	grpc.ServerStream
}

type studyServiceApiStreamReportHistoryServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiStreamReportHistoryServer) Send(m *Report) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_StreamParticipantFileInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfoQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).StreamParticipantFileInfos(m, &studyServiceApiStreamParticipantFileInfosServer{stream})
}

type StudyServiceApi_StreamParticipantFileInfosServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type studyServiceApiStreamParticipantFileInfosServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiStreamParticipantFileInfosServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetConfidentialResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfidentialResponsesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetConfidentialResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetConfidentialResponses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetConfidentialResponses(ctx, req.(*ConfidentialResponsesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyServiceApi_GetResponsesWideFormatCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResponseExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetResponsesWideFormatCSV(m, &studyServiceApiGetResponsesWideFormatCSVServer{stream})
}

type StudyServiceApi_GetResponsesWideFormatCSVServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetResponsesWideFormatCSVServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetResponsesWideFormatCSVServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetResponsesLongFormatCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResponseExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetResponsesLongFormatCSV(m, &studyServiceApiGetResponsesLongFormatCSVServer{stream})
}

type StudyServiceApi_GetResponsesLongFormatCSVServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetResponsesLongFormatCSVServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetResponsesLongFormatCSVServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetResponsesFlatJSON_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResponseExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetResponsesFlatJSON(m, &studyServiceApiGetResponsesFlatJSONServer{stream})
}

type StudyServiceApi_GetResponsesFlatJSONServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetResponsesFlatJSONServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetResponsesFlatJSONServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetResponsesFlatJSONWithPagination_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResponseExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetResponsesFlatJSONWithPagination(m, &studyServiceApiGetResponsesFlatJSONWithPaginationServer{stream})
}

type StudyServiceApi_GetResponsesFlatJSONWithPaginationServer interface {
	Send(*PaginatedFile) error
	grpc.ServerStream
}

type studyServiceApiGetResponsesFlatJSONWithPaginationServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetResponsesFlatJSONWithPaginationServer) Send(m *PaginatedFile) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetSurveyInfoPreviewCSV_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SurveyInfoExportQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudyServiceApiServer).GetSurveyInfoPreviewCSV(m, &studyServiceApiGetSurveyInfoPreviewCSVServer{stream})
}

type StudyServiceApi_GetSurveyInfoPreviewCSVServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type studyServiceApiGetSurveyInfoPreviewCSVServer struct {
	grpc.ServerStream
}

func (x *studyServiceApiGetSurveyInfoPreviewCSVServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StudyServiceApi_GetSurveyInfoPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyInfoExportQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceApiServer).GetSurveyInfoPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.study_service.StudyServiceApi/GetSurveyInfoPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceApiServer).GetSurveyInfoPreview(ctx, req.(*SurveyInfoExportQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// StudyServiceApi_ServiceDesc is the grpc.ServiceDesc for StudyServiceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudyServiceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "influenzanet.study_service.StudyServiceApi",
	HandlerType: (*StudyServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _StudyServiceApi_Status_Handler,
		},
		{
			MethodName: "EnterStudy",
			Handler:    _StudyServiceApi_EnterStudy_Handler,
		},
		{
			MethodName: "GetAssignedSurveys",
			Handler:    _StudyServiceApi_GetAssignedSurveys_Handler,
		},
		{
			MethodName: "GetAssignedSurvey",
			Handler:    _StudyServiceApi_GetAssignedSurvey_Handler,
		},
		{
			MethodName: "SubmitResponse",
			Handler:    _StudyServiceApi_SubmitResponse_Handler,
		},
		{
			MethodName: "LeaveStudy",
			Handler:    _StudyServiceApi_LeaveStudy_Handler,
		},
		{
			MethodName: "ProfileDeleted",
			Handler:    _StudyServiceApi_ProfileDeleted_Handler,
		},
		{
			MethodName: "DeleteParticipantData",
			Handler:    _StudyServiceApi_DeleteParticipantData_Handler,
		},
		{
			MethodName: "DeleteParticipantFiles",
			Handler:    _StudyServiceApi_DeleteParticipantFiles_Handler,
		},
		{
			MethodName: "RegisterTemporaryParticipant",
			Handler:    _StudyServiceApi_RegisterTemporaryParticipant_Handler,
		},
		{
			MethodName: "ConvertTemporaryToParticipant",
			Handler:    _StudyServiceApi_ConvertTemporaryToParticipant_Handler,
		},
		{
			MethodName: "GetAssignedSurveysForTemporaryParticipant",
			Handler:    _StudyServiceApi_GetAssignedSurveysForTemporaryParticipant_Handler,
		},
		{
			MethodName: "CreateReport",
			Handler:    _StudyServiceApi_CreateReport_Handler,
		},
		{
			MethodName: "GetStudiesForUser",
			Handler:    _StudyServiceApi_GetStudiesForUser_Handler,
		},
		{
			MethodName: "GetActiveStudies",
			Handler:    _StudyServiceApi_GetActiveStudies_Handler,
		},
		{
			MethodName: "GetStudySurveyInfos",
			Handler:    _StudyServiceApi_GetStudySurveyInfos_Handler,
		},
		{
			MethodName: "HasParticipantStateWithCondition",
			Handler:    _StudyServiceApi_HasParticipantStateWithCondition_Handler,
		},
		{
			MethodName: "GetParticipantMessages",
			Handler:    _StudyServiceApi_GetParticipantMessages_Handler,
		},
		{
			MethodName: "GetResearcherMessages",
			Handler:    _StudyServiceApi_GetResearcherMessages_Handler,
		},
		{
			MethodName: "DeleteMessagesFromParticipant",
			Handler:    _StudyServiceApi_DeleteMessagesFromParticipant_Handler,
		},
		{
			MethodName: "DeleteResearcherMessages",
			Handler:    _StudyServiceApi_DeleteResearcherMessages_Handler,
		},
		{
			MethodName: "GetReportsForUser",
			Handler:    _StudyServiceApi_GetReportsForUser_Handler,
		},
		{
			MethodName: "RemoveConfidentialResponsesForProfiles",
			Handler:    _StudyServiceApi_RemoveConfidentialResponsesForProfiles_Handler,
		},
		{
			MethodName: "CreateNewStudy",
			Handler:    _StudyServiceApi_CreateNewStudy_Handler,
		},
		{
			MethodName: "GetAllStudies",
			Handler:    _StudyServiceApi_GetAllStudies_Handler,
		},
		{
			MethodName: "GetStudy",
			Handler:    _StudyServiceApi_GetStudy_Handler,
		},
		{
			MethodName: "SaveStudyMember",
			Handler:    _StudyServiceApi_SaveStudyMember_Handler,
		},
		{
			MethodName: "RemoveStudyMember",
			Handler:    _StudyServiceApi_RemoveStudyMember_Handler,
		},
		{
			MethodName: "GetResearcherNotificationSubscriptions",
			Handler:    _StudyServiceApi_GetResearcherNotificationSubscriptions_Handler,
		},
		{
			MethodName: "UpdateResearcherNotificationSubscriptions",
			Handler:    _StudyServiceApi_UpdateResearcherNotificationSubscriptions_Handler,
		},
		{
			MethodName: "GetStudiesWithPendingParticipantMessages",
			Handler:    _StudyServiceApi_GetStudiesWithPendingParticipantMessages_Handler,
		},
		{
			MethodName: "SaveStudyStatus",
			Handler:    _StudyServiceApi_SaveStudyStatus_Handler,
		},
		{
			MethodName: "SaveStudyProps",
			Handler:    _StudyServiceApi_SaveStudyProps_Handler,
		},
		{
			MethodName: "SaveStudyRules",
			Handler:    _StudyServiceApi_SaveStudyRules_Handler,
		},
		{
			MethodName: "GetCurrentStudyRules",
			Handler:    _StudyServiceApi_GetCurrentStudyRules_Handler,
		},
		{
			MethodName: "GetStudyRulesHistory",
			Handler:    _StudyServiceApi_GetStudyRulesHistory_Handler,
		},
		{
			MethodName: "RemoveStudyRulesVersion",
			Handler:    _StudyServiceApi_RemoveStudyRulesVersion_Handler,
		},
		{
			MethodName: "SaveSurveyToStudy",
			Handler:    _StudyServiceApi_SaveSurveyToStudy_Handler,
		},
		{
			MethodName: "GetSurveyVersionInfos",
			Handler:    _StudyServiceApi_GetSurveyVersionInfos_Handler,
		},
		{
			MethodName: "GetSurveyKeys",
			Handler:    _StudyServiceApi_GetSurveyKeys_Handler,
		},
		{
			MethodName: "GetSurveyDefForStudy",
			Handler:    _StudyServiceApi_GetSurveyDefForStudy_Handler,
		},
		{
			MethodName: "RemoveSurveyVersion",
			Handler:    _StudyServiceApi_RemoveSurveyVersion_Handler,
		},
		{
			MethodName: "UnpublishSurvey",
			Handler:    _StudyServiceApi_UnpublishSurvey_Handler,
		},
		{
			MethodName: "DeleteStudy",
			Handler:    _StudyServiceApi_DeleteStudy_Handler,
		},
		{
			MethodName: "RunRules",
			Handler:    _StudyServiceApi_RunRules_Handler,
		},
		{
			MethodName: "RunRulesForSingleParticipant",
			Handler:    _StudyServiceApi_RunRulesForSingleParticipant_Handler,
		},
		{
			MethodName: "RunRulesForPreviousResponses",
			Handler:    _StudyServiceApi_RunRulesForPreviousResponses_Handler,
		},
		{
			MethodName: "GetStudyResponseStatistics",
			Handler:    _StudyServiceApi_GetStudyResponseStatistics_Handler,
		},
		{
			MethodName: "GetParticipantStatesWithPagination",
			Handler:    _StudyServiceApi_GetParticipantStatesWithPagination_Handler,
		},
		{
			MethodName: "GetParticipantStateByID",
			Handler:    _StudyServiceApi_GetParticipantStateByID_Handler,
		},
		{
			MethodName: "GetConfidentialResponses",
			Handler:    _StudyServiceApi_GetConfidentialResponses_Handler,
		},
		{
			MethodName: "GetSurveyInfoPreview",
			Handler:    _StudyServiceApi_GetSurveyInfoPreview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadParticipantFile",
			Handler:       _StudyServiceApi_UploadParticipantFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetParticipantFile",
			Handler:       _StudyServiceApi_GetParticipantFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamStudyResponses",
			Handler:       _StudyServiceApi_StreamStudyResponses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamParticipantStates",
			Handler:       _StudyServiceApi_StreamParticipantStates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReportHistory",
			Handler:       _StudyServiceApi_StreamReportHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamParticipantFileInfos",
			Handler:       _StudyServiceApi_StreamParticipantFileInfos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResponsesWideFormatCSV",
			Handler:       _StudyServiceApi_GetResponsesWideFormatCSV_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResponsesLongFormatCSV",
			Handler:       _StudyServiceApi_GetResponsesLongFormatCSV_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResponsesFlatJSON",
			Handler:       _StudyServiceApi_GetResponsesFlatJSON_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResponsesFlatJSONWithPagination",
			Handler:       _StudyServiceApi_GetResponsesFlatJSONWithPagination_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSurveyInfoPreviewCSV",
			Handler:       _StudyServiceApi_GetSurveyInfoPreviewCSV_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "study_service/study-service.proto",
}
